<?php
/**
 * @file
 * Code for the DoSomething Reportback feature.
 */

include_once 'dosomething_reportback.features.inc';

/**
 * Implements hook_entity_info().
 */
function dosomething_reportback_entity_info() {
  $info = array();
  $info['reportback'] = array(
    'label' => t('Reportback'),
    'base table' => 'dosomething_reportback',
    'entity keys' => array(
      'id' => 'rbid',
      'label' => 'rbid',
    ),
    'entity class' => 'ReportbackEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ReportbackEntityController',
    'module' => 'dosomething_reportback',
    'fieldable' => TRUE,
    'bundles' => array(
      'reportback' => array(
        'label' => t('Reportback'),
        'admin' => array(
          'path' => 'admin/reportback',
          'access arguments' => array('administer modules'),
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function dosomething_reportback_entity_property_info() {
  $info = array();
  $properties = &$info['reportback']['properties'];
  $properties['rbid'] = array(
    'label' => t('Reportback rbid'),
    'description' => t('The unique ID of the reportback.'),
    'type' => 'integer',
    'schema field' => 'rbid',
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['nid'] = array(
    'label' => t('Node nid'),
    'description' => t('The node nid of the reportback.'),
    'type' => 'node',
    'schema field' => 'nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['uid'] = array(
    'label' => t('User uid'),
    'description' => t('The user uid of the reportback.'),
    'type' => 'user',
    'schema field' => 'uid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['created'] = array(
    'label' => t('Created Date'),
    'description' => t('Date the reportback was created.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'created',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['updated'] = array(
    'label' => t('Last Updated'),
    'description' => t('Date the reportback was last updated.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'updated',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['quantity'] = array(
    'label' => t('Quantity'),
    'description' => t('The number of reportback_nouns reportback_verbed.'),
    'type' => 'integer',
    'required' => TRUE,
    'schema field' => 'quantity',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['why_participated'] = array(
    'label' => t('Why Participated'),
    'description' => t('Why the user participated.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'why_participated',
    'setter callback' => 'entity_property_verbatim_set',
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function dosomething_reportback_menu() {
  $items = array();
  $items['admin/reportback'] = array(
    'title' => 'Reportbacks',
    'description' => 'Configuration settings for Reportbacks.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer modules'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['reportback/%reportback'] = array(
    'title callback' => 'Reportback',
    'page callback' => 'dosomething_reportback_view_entity',
    'page arguments' => array(1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('view', 1),
  );
  $items['reportback/%reportback/edit'] = array(
    'title callback' => 'Edit Reportback',
    'page callback' => 'dosomething_reportback_edit_entity',
    'page arguments' => array(1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['reportback/%reportback/delete'] = array(
    'title callback' => 'Delete Reportback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_reportback_delete_form', 1),
    'access callback' => 'dosomething_reportback_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function dosomething_reportback_admin_paths() {
  $paths = array(
    'node/*/reportbacks' => TRUE,
  );
  return $paths;
}

/**
 * Access callback for reportback entity operations.
 */
function dosomething_reportback_access($op, $entity, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  $perm_any = $op . ' any reportback';
  $perm_own = $op . ' own reportback';
  if (user_access($perm_any, $account)){
    return TRUE;
  }
  // Check that user has access to $op own, and is the author.
  return user_access($perm_own, $account) && $account->uid == $entity->uid;
}


/**
 * Implements hook_permission().
 */
function dosomething_reportback_permission() {
  return array(
    'delete any reportback' => array(
      'title' => t('Delete any reportback'),
    ),
    'delete own reportback' => array(
      'title' => t('Delete own reportback'),
    ),
    'edit any reportback' => array(
      'title' => t('Edit any reportback'),
    ),
    'edit own reportback' => array(
      'title' => t('Edit own reportback'),
    ),
    'view any reportback' => array(
      'title' => t('View any reportback'),
    ),
    'view own reportback' => array(
      'title' => t('View own reportback'),
    ),
  );
}

/**
 * Menu autoloader for /reportback.
 */
function reportback_load($id) {
  $reportback = entity_load('reportback', array($id));
  return array_pop($reportback);
}

/**
 * Callback for /reportback/ID page.
 */
function dosomething_reportback_view_entity($entity) {
  return entity_view('reportback', array($entity->rbid => $entity), 'full');
}

/**
 * Process variables for entity.tpl.php.
 *
 * @see template_preprocess_entity in Entity API module.
 */
function dosomething_reportback_preprocess_entity(&$variables) {
  if ($variables['elements']['#entity_type'] == 'reportback' && $variables['view_mode'] == 'full') {
    // Enables reportback.tpl.php naming suggestion.
    $variables['theme_hook_suggestions'][] = 'reportback';
    $entity = $variables['elements']['#entity'];
    if (dosomething_reportback_access('edit', $entity)) {
      $variables['edit_link'] = l('Update', 'reportback/' . $entity->rbid . '/edit');
    }
    if (dosomething_reportback_access('delete', $entity)) {
      $variables['delete_link'] = l('Delete', 'reportback/' . $entity->rbid . '/delete');
    }
  }
}

/**
 * Callback for /reportback/ID/edit page.
 */
function dosomething_reportback_edit_entity($entity) {
  // We need the node to pass through to rb form for quantity values.
  $node = node_load($entity->nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return drupal_get_form('dosomething_reportback_form', $wrapper, $entity);
}

/**
 * Form constructor for a node reportback create/update form.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper of the node to report back for.
 * @param object $entity
 *   Optional. The reportback entity to update, if updating an entity.
 *   If NULL, submitting the form will create a new reportback entity.
 *
 * @ingroup forms
 */
function dosomething_reportback_form($form, &$form_state, $wrapper, $entity = NULL) {
  // If entity is not set, this is a create form.
  if (!isset($entity)) {
    $entity = entity_create('reportback', array(
      'rbid' => 0,
      'quantity' => '',
      'why_participated' => NULL,
    ));
    $submit_label = t("Submit");
  }
  // Else, it's update form.  Display updated date.
  else {
    $form['header'] = array(
      '#markup' => '<p class="legal">Last updated ' . format_date($entity->updated, 'short') . '</p>',
    );
    $submit_label = t("Update");
  }
  $form['rbid'] = array(
    '#type' => 'hidden',
    '#default_value' => $entity->rbid,
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $wrapper->nid->value(),
  );
  $form['why_participated'] = array(
    '#type' => 'textarea',
    '#required' => TRUE,
    '#title' => t('Why is this campaign important to you?'),
    '#default_value' => $entity->why_participated,    
  );
  $form['quantity'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t("Total number of @noun @verb", array(
        '@noun' => $wrapper->field_reportback_noun->value(),
        '@verb' => $wrapper->field_reportback_verb->value(),
      )
    ),
    '#default_value' => $entity->quantity,
  );
  // Attach all reportback entity fields to the form:
  field_attach_form('reportback', $entity, $form, $form_state);
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => $submit_label,
    ),
  );
  return $form;
}

/**
 * Submit callback for dosomething_reportback_form().
 */
function dosomething_reportback_form_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $values['uid'] = $user->uid;
  $values['files'] = array();
  // Loop through User Reportback Images field:
  foreach ($values['field_image_user_reportback'][LANGUAGE_NONE] as $delta => $file) {
    // Exclude the "add another" field (which has fid value 0).
    if ($file['fid'] != 0) {
      $values['files'][] = $file['fid'];
    }
  }
  // @todo: Sort $files array by the weight field, to support re-ordering.

  // If no rbid, we need to insert. If insert is success:
  if ($values['rbid'] == 0 && dosomething_reportback_insert_reportback($values)) {
    // Load node to get reportback message confirmation.
    $node_wrapper = entity_metadata_wrapper('node', $values['nid']);
    drupal_set_message($node_wrapper->field_reportback_confirm_msg->value());
    return;
  }
  // Else we are updating the entity:
  elseif (dosomething_reportback_update_reportback($values['rbid'], $values)) {
    drupal_set_message(t("Your submission has been updated."));
    return;
  }
  // If we didn't break out of function by now, insert/update didn't work.
  drupal_set_message(t("An error has occurred."), 'error');
}

/**
 * Form constructor for a reportback delete form.
 *
 * @param object $entity
 *   The reportback entity to delete.
 *
 * @ingroup forms
 */
function dosomething_reportback_delete_form($form, &$form_state, $entity) {
  $form['rbid'] = array(
    '#type' => 'hidden',
    '#default_value' => $entity->rbid,
  );
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $entity->nid,
  );
  $form['warning'] = array(
    '#markup' => t("Are you sure you want to delete this reportback?  This cannot be undone."),
  );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Delete'),
    ),
  );
  return $form;
}

/**
 * Submit callback for dosomething_reportback_delete_form().
 */
function dosomething_reportback_delete_form_submit($form, &$form_state) {
  $rbid = $form_state['values']['rbid'];
  // Check for user screwing with form values via browser type firebuggin' things.
  // This check will only work if the form lives only on reportback/*/delete.
  if ($rbid == arg(1)) {
    dosomething_reportback_delete_reportback($rbid);
    // Redirect back to the node that the reportback was for.
    $form_state['redirect'] = 'node/' . $form_state['values']['nid'];
    drupal_set_message(t("Reportback deleted."));
  }
  // Else, there was some rat fuckery.
  drupal_set_message(t("There was an error processing your request."));
}

/**
 * Inserts a reportback entity with given $values.
 *
 * @param array $values
 *   Associative array of values to save to new reportback, with keys:
 *   - uid: The user uid who is reporting back.
 *   - nid: The node nid that user is reporting back for.
 *   - files: An array of File fid's to store with the reportback.
 *   - quantity: Number of nouns verbed.
 *   - why_participated: Why user participated.
 *   - num_participants: Number of participants (if applicable).
 *
 * @return mixed
 *   Newly inserted reportback rbid if success, or FALSE if error.
 */
function dosomething_reportback_insert_reportback($values) {
  $entity = entity_create('reportback', array());
  return dosomething_reportback_save($entity, $values);
}

/**
 * Updates a reportback entity with given $values.
 *
 * @param int $rbid
 *   The reportback rbid of the reportback to update.
 * @param array $values
 *   An array of expected reportback values.  
 *   See @dosomething_reportback_insert_reportback().
 *
 * @return mixed
 *   The updated reportback rbid if success, or FALSE if error.
 */
function dosomething_reportback_update_reportback($rbid, $values) {
  $entity = entity_load_single('reportback', $rbid);
  return dosomething_reportback_save($entity, $values);
}

/**
 * Deletes a reportback entity.
 *
 * @param int $rbid
 *   Reportback rbid to delete.
 *
 * @return
 *   FALSE, if error.
 */
function dosomething_reportback_delete_reportback($rbid) {
  return entity_delete('reportback', $rbid);
}

/**
 * Checks if a reportback exists for given $nid and $uid.
 *
 * @param int $nid
 *   The node nid of the reportback to check.
 * @param int $uid
 *   Optional - the user uid of reportback to check.  
 *   If not given, uses global $user->uid.
 *
 * @return mixed
 *   The rbid of reportback or FALSE if it doesn't exist.
 */
function dosomething_reportback_exists($nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  $result = db_select('dosomething_reportback', 'r')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->fields('r', array('rbid'))
    ->execute();
  $rbid = $result->fetchField(0);
  // If a rbid was found, return it.
  if (is_numeric($rbid)) {
    return $rbid;
  }
  // Otherwise return FALSE.
  return FALSE;
}

/**
 * Saves a reportback entity with given values.
 *
 * @param object $entity
 *   The reportback entity to save (may be a blank entity if insert).
 * @param array $values
 *   The reportback entity values to save.
 *
 * @return mixed
 *   The reportback entity rbid if success, or FALSE if error.
 */
function dosomething_reportback_save($entity, $values) {
  try {
    // Set entity properties.
    dosomething_reportback_set_properties($entity, $values);
    // Set entity files.
    dosomething_reportback_set_files($entity, $values);
    // Save the entity.
    $entity->save();
    // Return reportback rbid.
    return $entity->rbid;
  }
  catch (Exception $e) {
    watchdog('dosomething_reportback', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Sets a reportback entity's properties.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   Associative of property values to set, with property name as keys.
 */
function dosomething_reportback_set_properties(&$entity, $values) {
  // List all possible entity properties to write.
  $properties = array('uid', 'nid', 'quantity', 'why_participated');
  // For each of them:
  foreach ($properties as $property) {
    // If we have a value set for this property.
    if (isset($values[$property])) {
      // Set property value in wrapper.
      $entity->{$property} = $values[$property];
    }
  }
}

/**
 * Sets a reportback entity's files.
 *
 * @param object $entity
 *   The reportback entity to set properties for.
 * @param array $values
 *   An array of file fid's to set.
 */
function dosomething_reportback_set_files(&$entity, $values) {
  // Unset current image field values.
  $entity->field_image_user_reportback = array();
  // Loop through all files provided in $values.
  foreach ($values['files'] as $fid) {
    // Image field is stored as array of Files arrays.
    $entity->field_image_user_reportback[LANGUAGE_NONE][] = array('fid' => $fid);
  }
}

/**
 * Inserts a record into the reportback log table for a given reportback.
 *
 * Called from various hook_entity_[operation] functions.
 * @see dosomething_reportback_entity_insert().
 *
 * @param string $op
 *   The operation performed, e.g. "insert", "update", "delete".
 * @param object $entity
 *   The reportback entity to log an update for.
 */
function dosomething_reportback_log_insert($op, $entity) {
  global $user;
  $fids = array();
  // Loop through all files in field_image_user_reportback to store fids.
  foreach ($entity->field_image_user_reportback[LANGUAGE_NONE] as $file) {
    $fids[] = $file['fid'];
  }
  // If deleting, store current time.
  if ($op == 'delete') {
    $timestamp = REQUEST_TIME;
  }
  // Else use the entity's updated property.
  else {
    $timestamp = $entity->updated;
  }
  try {
    // Log the entity values into the log table.
    $id = db_insert('dosomething_reportback_log')
      ->fields(array(
        'rbid' => $entity->rbid,
        'uid' => $user->uid,
        'op' => $op,
        'timestamp' => $timestamp,
        'quantity' => $entity->quantity,
        'why_participated' => $entity->why_participated,
        'files' => implode(',', $fids),
        'num_files' => count($fids),
      ))
      ->execute();
  }
  catch (Exception $e) {
    watchdog('dosomething_reportback', $e, array(), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_entity_insert().
 */
function dosomething_reportback_entity_insert($entity, $type) {
  if ($type == 'reportback') {
    dosomething_reportback_log_insert('insert', $entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function dosomething_reportback_entity_update($entity, $type) {
  if ($type == 'reportback') {
    dosomething_reportback_log_insert('update', $entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function dosomething_reportback_entity_delete($entity, $type) {
  if ($type == 'reportback') {
    dosomething_reportback_log_insert('delete', $entity);
  }
}
