#!/usr/bin/env node

var _ = require("lodash");
var colors = require('colors');
var fs = require('fs');
var glob = require("glob");
var program = require("commander");
var shell = require("shelljs");
var spawn = require("child_process").spawn;
var pkg = require("../package.json");

var config = {};

/*
 *  Options and help menu:
 */
program
  .version(pkg.version)
  .usage('<config> [options]')
  .description('Specify a JSON configuration file in the `tests/config` directory, or leave blank for default options.')
  .option('-m, --mocha [test]', 'Run specific Mocha unit tests.')
  .option('-c, --casperjs [test]', 'Run specific CasperJS integration tests.')
  .option('-u, --url [url]', 'Specify an alternative URL to run integration tests against.')
  .option('--xunit', 'Return XML output formatted for CI servers.')
  .option('--verbose', 'Return XML output formatted for CI servers.')
  .on('--help', function() {
    console.log('  Specify a JSON configuration file in the `tests/config` directory,')
    console.log('  or leave blank for default options.');
    console.log('');
    console.log('  Examples:');
    console.log('    test default');
    console.log('    test default --integration=specific/test/dir/**/*');
    console.log('    test uk');
    console.log('    test uk --casperjs=uk/sso');
    console.log('');
  })
  .parse(process.argv);

// Load a configuration file from the tests/config directory:
if(program.args.length) {
  configPath = program.args[0];
} else {
  configPath = "default";
}

console.log("Running tests with '%s' configuration.".bold.blue, configPath);
config = require("../tests/config/" + configPath + ".json");

// Set or override unit tests with --mocha [test]:
if(!_.isUndefined(program.mocha)) {
  config.mocha = program.mocha;
}

// Set or override integration tests with --casperjs [test]:
if(!_.isUndefined(program.casperjs)) {
  config.casperjs = [program.casperjs];
}

// Toggle verbose output with --verbose:
if(program.url) {
  config.url = program.url;
}

// Toggle XUnit XML output with --xunit:
if(program.xunit) {
  config.xunit = true;
}

// Set or override CasperJS URL with --url [url]:
if(program.verbose) {
  config.verbose = true;
}

// Start 'er up.
runUnitTests(function() {
  runIntegrationTests();
})

/*
 * Run specified unit tests with Mocha:
 */
function runUnitTests(callback) {
  var _mochaReporter = "";
  if(config.xunit) {
    _mochaReporter = "-R xunit";
  }

  var _mochaFile;
  if(config.mocha) {
    _mochaFile = "tests/mocha/" + config.mocha + ".html";
  }

  console.log("Running '%s' unit tests with Mocha...".bold.underline.yellow, config.mocha);

  var mochaCmd = ["mocha-phantomjs", _mochaFile, _mochaReporter].join(" ");
  var mochaResults = shell.exec(mochaCmd, {async: false}, function(code, output) {
    if(code !== 0) {
      console.log("Unit tests run successfully.");
    }

    if(config.xunit) {
      fs.writeFileSync(__dirname + '/../tmp/tests/mocha-test-results.xml', output);
      console.log("Wrote Mocha test results to file.".bold.blue);
    }

    callback();
  });
}


/*
 * Run specified integration tests with CasperJS:
 */
function runIntegrationTests() {
  var _casperFiles;
  if(config.casperjs) {
    _casperFiles = _.map(config.casperjs, function(glob) {
      if(glob.charAt(0) === "!") {
        return "!" + __dirname + "/../tests/integration/" + glob.substr(1) + ".{js,coffee}"
      } else {
        return __dirname + "/../tests/integration/" + glob + ".{js,coffee}"
      }
    });

    _casperFiles = getFiles(_casperFiles);
    console.log("Running %d integration test suites with CasperJS...".bold.underline.yellow, _casperFiles.length);
    console.log( _casperFiles.join("\n").grey );
  }

  var _casperIncludes = [
    __dirname + "/../tests/scripts/variables.js",
    __dirname + "/../tests/scripts/common.js",
    __dirname + "/../tests/scripts/drush.js",
    __dirname + "/../tests/scripts/phantomcss.js",
    __dirname + "/../tests/scripts/randomuser.js",
  ];

  var _casperVerbose = "";
  if(config.verbose) {
    _casperVerbose = "--log-level=debug --verbose";
  }

  var _casperURL = "http://dev.dosomething.org:8888";
  if(config.url) {
    _casperURL = config.url;
  }

  var _casperXUnit = "";
  if(config.xunit) {
    _casperXUnit = "--xunit=" + __dirname + "/../tmp/tests/integration-test-results.xml";
  }

  var casperCmd = [
    "casperjs test",
    _casperFiles.join(" "),
    "--includes=" + _casperIncludes.join(","),
    "--url=" + _casperURL,
    _casperXUnit,
    _casperVerbose
  ].join(" ");

  var casperResults = shell.exec(casperCmd, {}, function(code, output) {
    if(code !== 0) {
      console.log("Integration tests run successfully.");
    }
  });
}


/**
 * Get files from a glob string or array of glob strings.
 * @param patterns {String / Array} Pattern to be globbed.
 * @return Array of matching files.
 *
 * @example
 * // getFiles(["src/**", "!src/*.md"]);
 * Gets all files in src and subdirectories, excluding
 * any Markdown files in src.
 *
 */
function getFiles(patterns) {
  var result = [];

  if(_.isString(patterns)) { return glob.sync(patterns); }

  _.forEach(patterns, function(pattern) {
    // Check if this pattern should be included/removed from results
    var exclusion = pattern.indexOf('!') === 0;
    if (exclusion) { pattern = pattern.slice(1); };

    glob(pattern, {sync: true}, function(err, matches) {
      if (exclusion) {
        // If an exclusion, remove matching files.
        result = _.difference(result, matches);
      } else {
        // Otherwise add matching files.
        result = _.union(result, matches);
      }
    });
  });

  return result;
}
