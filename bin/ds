#!/bin/bash

# ==============================================================================
# GLOBALS
# ==============================================================================

# The base project directory
BASE_PATH=`pwd -P`

# The webroot directory name for the dev environment
WEB_DIR='html'

# Full webroot path
WEB_PATH=$BASE_PATH/$WEB_DIR

# The lib directory name
LIB_DIR='lib'

# Full lib path
LIB_PATH=$BASE_PATH/$LIB_DIR

# The config directory name
CONFIG_DIR='config'

# Full lib path
CONFIG_PATH=$BASE_PATH/$CONFIG_DIR

# Build directory name
BUILD_DIR='build'

# Project build make file
BUILD_MAKEFILE=$BASE_PATH/build-dosomething.make

# ==============================================================================
# Functions
# ==============================================================================

#=== FUNCTION ==================================================================
# NAME: art
# DESCRIPTION: Returns DS ascii art to console
#===============================================================================
function art {
  echo '     _____          ___     ';
  echo '    /  /::\        /  /\    ';
  echo '   /  /:/\:\      /  /:/_   ';
  echo '  /  /:/  \:\    /  /:/ /\  ';
  echo ' /__/:/ \__\:|  /  /:/ /::\ ';
  echo ' \  \:\ /  /:/ /__/:/ /:/\:\';
  echo '  \  \:\  /:/  \  \:\/:/~/:/';
  echo '   \  \:\/:/    \  \::/ /:/ ';
  echo '    \  \::/      \__\/ /:/  ';
  echo '     \__\/         /__/:/   ';
  echo '                   \__\/    ';
}

#=== FUNCTION ==================================================================
# NAME: help
# DESCRIPTION: Returns help text to console
#===============================================================================
function help {
  read -d '' help <<"USAGE"
usage: ds [build [--install]] [--help]

Runs helper scripts for DoSomething environment.

ds build [--install]
  Builds your environment with "drush make".  Also symlinks appropriate
  files into their respective directories.

  --install
    Runs "drush site-install" to actually install the Drupal instance.

ds composer
  Installs libraries via Composer within the Drupal libraries directory.

ds grunt [--watch]
  Installs Bower dependencies & compiles front-end assets (SCSS/JS) using Grunt.

  --watch
  Continues watching for changes and recompiles assets as necessary.

ds pull [stage|prod] [--db|--files]
  Pulls database and files from given environment down onto your local build.

  --db
    Pulls down database only.

  --files
    Pulls down files only.

ds --help
  Displays this help message.

USAGE
  echo "$help"
}

#=== FUNCTION ==================================================================
# NAME: build
# DESCRIPTION: Builds project from make files
#===============================================================================
function build {

  # Display ascii art
  art

  set -e
  cd $BASE_PATH

  if [ $WEB_PATH ]; then
    echo 'Wiping html directory...'
    rm -rf "$WEB_PATH"
  fi

  # Create the db, if for some reason it's not there yet.
  mysql -uroot -e "CREATE DATABASE IF NOT EXISTS dosomething;"

  # Do the build
  echo 'Running drush make...'
  drush make --prepare-install --no-gitinfofile --no-cache "$BUILD_MAKEFILE" "$WEB_DIR"
  set +e

  # Create symlinks
  symlinks

  echo 'Install composer dependencies'
  composer

  echo 'Install bower dependencies'
  bower

  # Clear caches and Run updates
  cd "$WEB_DIR"

  if [[ $1 == "--install" ]]
  then
    install
  fi

  if [[ $2 == "--dev" ]]
  then
    dev
  fi

  echo 'Replacing settings.php file...'
  rm -f $WEB_PATH/sites/default/settings.php && ln -s $CONFIG_PATH/settings.php $WEB_PATH/sites/default/settings.php

  if [ ! -e "$CONFIG_PATH/settings.local.php" ]
  then
    echo 'Creating local settings file...'
    cp $CONFIG_PATH/default.settings.local.php $CONFIG_PATH/settings.local.php
  fi

  echo 'Linking local settings file...'
  ln -s $CONFIG_PATH/settings.local.php $WEB_PATH/sites/default/settings.local.php

  echo 'Adding role to admin user...'
  drush user-add-role 'administrator' 1

  echo 'Updating database...'
  drush updb -y

  # Enable modules in info file
  echo 'Enabling modules in dosomething.info'
  drush --script-path=../bin/ php-script enable_modules.php

  echo 'Clearing caches...'
  drush cc all

  if [ ! -e "~/.bash_profile" ]
  then
    echo 'Setting up PHP CodeSniffer...'
    echo 'alias codercs="phpcs --standard=$WEB_PATH/profiles/dosomething/modules/contrib/coder/coder_sniffer/Drupal/ruleset.xml --extensions=php,module,inc,install,test,profile,theme"' >> ~/.bash_profile
    source ~/.bash_profile
  fi

  echo 'Adding APC script at /apc.php...'
  ln -s /srv/salt/php5/apc.php $WEB_PATH/apc.php

  # Run grunt task to configure front-end environment
  # this will install Bower/NPM dependencies
  grunt

  echo 'Build complete.'
}

#=== FUNCTION ==================================================================
# NAME: install
# DESCRIPTION: Installs project using dosomething profile
#===============================================================================
function install {
  echo 'Installing site...'
  drush site-install dosomething -y --db-url=mysql://root@localhost/dosomething --site-name=DoSomething

  echo 'Granting basic permissions...'
  drush rap 'anonymous user' 'access content'
  drush rap 'authenticated user' 'access content'

  # Without command below, view_unpublished module prompts you to
  # The content access permissions need to be rebuilt. Rebuild permissions.
  # This does that.
  echo 'Rebuilding node permissions'
  drush php-eval 'node_access_rebuild();'

  # For whatever weird reason, not all user permissions are set properly afer install.
  # This fixes it.
  echo 'Reverting all features'
  drush -y fra
}

#=== FUNCTION ==================================================================
# NAME: symlinks
# DESCRIPTION: Sylinks web_path modules and themes to lib_path.
#===============================================================================
function symlinks {
  echo 'Linking modules'
  rm -rf "$WEB_PATH/profiles/dosomething/modules/dosomething"
  ln -s "$LIB_PATH/modules/dosomething" "$WEB_PATH/profiles/dosomething/modules/dosomething"

  echo 'Linking themes'
  rm -rf "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"
  ln -s "$LIB_PATH/themes/dosomething/paraneue_dosomething" "$WEB_PATH/profiles/dosomething/themes/dosomething/paraneue_dosomething"
}

#=== FUNCTION ==================================================================
# NAME: devel
# DESCRIPTION: Enables modules, generates nodes.
#===============================================================================
function dev {
  echo 'Enabling modules'
  drush en devel devel_generate -y

  echo 'Auto-generating Content'
  drush generate-terms sponsors 20
  drush generate-terms tags 50
  drush genc 50 0 --types=image
  drush genc 50 0 --types=campaign

}

#=== FUNCTION ==================================================================
# NAME: deploy
# DESCRIPTION: Deploys project to Pantheon
#===============================================================================
function deploy {
  echo 'deploying'

  BASE_PATH=`pwd -P` # do this to play nice with CI

  if [ $BASE_PATH/$BUILD_DIR ]; then
    echo 'Wiping build directory...'
    rm -rf $BASE_PATH/$BUILD_DIR
  fi

  drush make --no-gitinfofile --no-cache "$BUILD_MAKEFILE" "$BUILD_DIR"

  ln -s $CONFIG_PATH/settings.php $CONFIG_PATH/$BUILD_DIR/sites/default/settings.php

  export ENV=dev
  export SITE=2b03733d-f60b-f4dd-67fb-9c518a66b3ca

  rsync -rlvz --size-only --ipv4 --progress -e 'ssh -p 2222' $BUILD_DIR/* $ENV.$SITE@appserver.$ENV.$SITE.drush.in:code/

  drush psite-commit $SITE $ENV --message="Deployment"

}

#=== FUNCTION ==================================================================
# NAME: composer
# DESCRIPTION: Installs/Updates composer dependencies
#===============================================================================
function composer {
  if hash composer 2>/dev/null;
  then
    cd $WEB_PATH/profiles/dosomething/libraries/zendesk
    echo -e "\e[4mInstalling composer dependencies for Zendesk...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $WEB_PATH/profiles/dosomething/libraries/messagebroker-phplib
    echo -e "\e[4mInstalling composer dependencies for Message Broker PHPLIB...\e[0m"
    eval "/usr/local/bin/composer install"

    cd $BASE_PATH

  fi
}


#=== FUNCTION ==================================================================
# NAME: bower
# DESCRIPTION: Installs/Updates bower dependencies
#===============================================================================
function bower {
  if hash bower 2>/dev/null;
  then
    cd $WEB_PATH/profiles/dosomething/themes/dosomething/paraneue
    echo -e "\e[4mInstalling bower dependencies for Paraneue...\e[0m"
    eval "/usr/bin/bower update"

    cd $LIB_PATH/themes/dosomething/paraneue_dosomething
    echo -e "\n\e[4mInstalling bower dependencies for Paraneue_DoSomething...\e[0m"
    eval "/usr/bin/bower update"

    cd $BASE_PATH

  fi
}


#=== FUNCTION ==================================================================
# NAME: grunt
# DESCRIPTION: Builds front-end assets (JS/SCSS) using Grunt
#===============================================================================
function grunt {
  # make sure bower dependencies are up to date
  bower

  cd $LIB_PATH/themes/dosomething/paraneue_dosomething

  if hash npm 2>/dev/null;
  then
    echo -e "\n\e[4mInstalling NPM dependencies...\e[0m"
    eval "/usr/bin/npm install"
  fi

  if hash grunt 2>/dev/null;
  then
    if [[ $1 == "--watch" ]]
    then
      echo -e "\n\e[4mBuilding SCSS/JS with Grunt, and watching for changes...\e[0m"
      echo -e "\e[30;43m(Press Ctrl-C to stop.)\e[0m\n"
      eval "/usr/bin/grunt"
    elif [[ $1 == "--prod" ]]
    then
      echo -e "\n\e[4mBuilding minified SCSS/JS with Grunt...\e[0m"
      eval "/usr/bin/grunt prod"
    else
      eval "/usr/bin/grunt build"
    fi
  fi

  cd $BASE_PATH

}

#=== FUNCTION ==================================================================
# NAME: pull_db
# DESCRIPTION: Pulls down database from given environment onto local.
#===============================================================================
function pull_db {
  if [[ $1 == "stage" ]]
  then
    echo "Pulling down db from staging"
    cd $WEB_PATH
    drush sql-sync @ds.staging @self -y
  fi
}

#=== FUNCTION ==================================================================
# NAME: pull_files
# DESCRIPTION: Pulls down files from given environment onto local.
#===============================================================================
function pull_files {
  if [[ $1 == "stage" ]]
  then
    echo "Pulling down files from staging"
    cd $WEB_PATH
    drush rsync @ds.staging @self -y
    symlinks
  fi
}

#=== FUNCTION ==================================================================
# NAME: check_environment_param
# DESCRIPTION: Outputs error message for invalid alias argument.
#===============================================================================
function check_alias_param {
  if [[ $1 != "stage" ]]
  then
    echo "Alias not found. Valid aliases: stage"
    exit
  fi
}


# ==============================================================================
# Commands
# ==============================================================================


#----------------------------------------------------------------------
# help
#----------------------------------------------------------------------
if [[ $1 == "--help" ]] || [[ $1 == "-h" ]] || [[ $1 == "" ]]
then
  help
fi

#----------------------------------------------------------------------
# build
#----------------------------------------------------------------------
if [[ $1 == "build" ]]
then
  if [[ $2 == "--install" ]] && [[ $3 == "--dev" ]]
  then
    build --install --dev
  elif [[ $2 == "--install" ]]
  then
    build --install
  else
    build
  fi
fi

#----------------------------------------------------------------------
# symlinks
#----------------------------------------------------------------------
if [[ $1 == "symlinks" ]]
then
  symlinks
fi

#----------------------------------------------------------------------
# deploy
#----------------------------------------------------------------------
if [[ $1 == "deploy" ]]
then
  deploy
fi

#----------------------------------------------------------------------
# composer
#----------------------------------------------------------------------
if [[ $1 == "composer" ]]
then
  composer
fi

#----------------------------------------------------------------------
# bower
#----------------------------------------------------------------------
if [[ $1 == "bower" ]]
then
  bower
fi

#----------------------------------------------------------------------
# grunt
#----------------------------------------------------------------------
if [[ $1 == "grunt" ]]
then
  grunt $2
fi

#----------------------------------------------------------------------
# pull
#----------------------------------------------------------------------
if [[ $1 == "pull" ]]
then
  check_alias_param $2
  if [[ $3 == "--db" ]]
  then
    pull_db $2
  elif [[ $3 == "--files" ]]
  then
    pull_files $2
  else
    pull_db $2
    pull_files $2
  fi
fi
