<?php
/**
 * @file
 * Code for the DoSomething specific Message Broker Producer functionality.
 */

/**
 * A request to send a message via the Message Broker library:
 * https://github.com/DoSomething/messagebroker-phplib
 *
 * @param string $origin
 *  Where the message request came from.
 * @param array $params
 *  Optional keyed array of data to send externally.
 */
function dosomething_mbp_request($origin, $params = NULL) {

  $productionType = NULL;
  switch ($origin) {
    case 'user_register':
    case 'user_password':
    case 'campaign_signup':
    case 'campaign_reportback':
      $productionType = 'produceTransactional';
      $payload = dosomething_mbp_transactional($origin, $params);
      break;

    case 'create_campaign':
    case 'update_campaign':
      $productionType = 'produceCampaignCache';
      $payload = dosomething_mbp_campaign_cache($origin, $params);
      break;
  }

  try {
    return message_broker_producer_request($productionType, $payload);
  }
  catch (Exception $e){
    watchdog('dosomething_mbp', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }

}

/**
 * Build payload for transactional producer requeusts. Any adjustments to the
 * data before becoming a payload should be done in this function.
 *
 * @param string $origin
 *  Where the message request came from.
 * @param array $params
 *  Optional keyed array of data to send externally.
 */
function dosomething_mbp_transactional($origin, $params = NULL) {
  $params['first_name'] = isset($params['first_name']) ? $params['first_name'] : 'Doer';
  $payload = array(
    'activity' => $origin,
    'email' => $params['email'],
    'uid' => $params['uid'],
  );
  switch ($origin) {
    case 'user_register':
      $payload['birthdate'] = $params['birthdate'];
      if (isset($params['mobile'])) {
        $payload['mobile'] = $params['mobile'];
      }
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
      );
      break;
    case 'user_password':
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'USERNAME' => $params['username'],
        'RESET_LINK' => $params['reset_link'],
      );
      break;
    case 'campaign_signup':
      $payload['event_id'] = $params['event_id'];
      // Check for mailchimp grouping_id+group_name:
      $mailchimp = isset($params['mailchimp_group_name']) && isset($params['mailchimp_grouping_id']);
      if ( $mailchimp ) {
        $payload['mailchimp_grouping_id'] = $params['mailchimp_grouping_id'];
        $payload['mailchimp_group_name'] = $params['mailchimp_group_name'];
      }
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'CAMPAIGN_TITLE' => $params['campaign_title'],
        'CAMPAIGN_LINK' => $params['campaign_link'],
        'CALL_TO_ACTION' => $params['call_to_action'],
        'STEP_ONE' => $params['step_one'],
        'STEP_TWO' => $params['step_two'],
        'STEP_THREE' => $params['step_three'],
      );
      break;
    case 'campaign_reportback':
      $payload['event_id'] = $params['event_id'];
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'CAMPAIGN_TITLE' => $params['campaign_title'],
        'IMPACT_VERB' => $params['impact_verb'],
        'IMPACT_NUMBER' => $params['impact_number'],
        'IMPACT_NOUN' => $params['impact_noun'],
      );
      break;
  }

  return $payload;

}

/**
 * Build payload for campaign cache message requests.
 *
 * @param string $origin
 *  Where the message request came from.
 * @param array $params
 *  Optional keyed array of data to send externally.
 */
function dosomething_mbp_campaign_cache($origin, $params = NULL) {

  switch ($origin) {
    case 'create_campaign':
    case 'update_campaign':
      $payload = array(
        'application_event' => $origin,
        'application_id' => 2,
        'title' => $params['title'],
        'url' => '??',
        'call_to_action_text' => '??',
        'do_it_text' => '??',
        'cover_image_url' => '??',
        'sponsor_image_url' => '??',
        'update_text' => '??',
        'update_date' => '??',
      );
  }

  return $payload;

}

/*
 * Impliments hook_node_insert()
 *
 * Respond to the creation of campaign nodes to produce Message Broker entries
 * in the directCacheExchange.
 */
function dosomething_mbp_node_insert($node) {
  
  if ($node->type == 'campaign') {
    $params = array(
      'title' => $node->title,
    );
    dosomething_mbp_request('create_campaign', $params);
  }
  
}

/*
 * Impliments hook_node_update()
 *
 * Respond to the update of campaign nodes to produce Message Broker entries
 * in the directCacheExchange.
 */
function dosomething_mbp_node_update($node) {
  
  if ($node->type == 'campaign') {
    $params = array(
      'title' => $node->title,
    );
    dosomething_mbp_request('update_campaign', $params);
  }
  
}