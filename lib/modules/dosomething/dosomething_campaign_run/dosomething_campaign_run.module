<?php
/**
 * @file
 * Code for the dosomething_campaign_run feature.
 */

include_once 'dosomething_campaign_run.features.inc';
include_once 'dosomething_campaign_run.cron.inc';
include_once 'dosomething_campaign_run.theme.inc';

/**
 * Adds loaded closed campaign_run node to the given parent campaign's $vars.
 *
 * @see dosomething_campaign_preprocess_node().
 */
function dosomething_campaign_run_preprocess_closed(&$vars) {
  if (!isset($vars['nid'])) { return; }

  // Use the campaign closed template to theme.
  $vars['theme_hook_suggestions'][] = 'node__campaign__closed';

  // If a closed Campaign Run node exists:
  if ($closed_run_nid = dosomething_campaign_run_get_closed_run_nid($vars['nid'])) {
    // Load the closed campaign_run.
    $wrapper = entity_metadata_wrapper('node', $closed_run_nid);
    // Gather the campaign_run vars.
    dosomething_campaign_run_preprocess_text_vars($vars, $wrapper);
    dosomething_campaign_run_preprocess_winners($vars, $closed_run_nid);
    dosomething_campaign_run_preprocess_klout_gallery($vars, $closed_run_nid);
    // If user has not presigned up:
    if (!dosomething_signup_presignup_exists($vars['nid'])) {
       // Preprocess the presignup form.
      $label = t(variable_get('dosomething_campaign_run_signup_button_copy'));
      dosomething_signup_preprocess_signup_button($vars, $label, $presignup = TRUE);
      $vars['presignup_callout'] = t(variable_get('dosomething_campaign_presignup_callout_copy'));
    }
    // Preprocess the campaign reportback gallery.
    dosomething_campaign_preprocess_closed_reportback_gallery($vars, '300x300', 3);
  }

  // Conditions for totals text display
  $participants_columned = (isset($vars['total_quantity']) || isset($vars['total_quantity_placeholder'])) && (isset($vars['total_quantity']) || isset($vars['total_quantity_label']));
  $vars['participants_columned'] = $participants_columned;

  $quantity_columned = isset($vars['total_participants']);
  $vars['quantity_columned'] = $quantity_columned;

  // Condition to display 'Buzz' section
  $display_celebs = (
    isset($vars['additional_text_title']) OR
    isset($vars['additional_text']) OR
    (isset($vars['psa']) AND $vars['psa'] !== '') OR
    (isset($vars['klout_gallery']) AND !empty($vars['klout_gallery']))
  );

  $vars['display_buzz_section'] = $display_celebs;
}

/**
 * Adds given campaign_run entity $wrapper values to $vars.
 *
 * @param array $vars
 *   Array of variables via hook_preprocess_node.
 * @param object $wrapper
 *   Entity metadata wrapper of the campaign_run node to gather values from.
 */
function dosomething_campaign_run_preprocess_text_vars(&$vars, $wrapper) {
  $text_fields = array(
    'additional_text',
    'additional_text_title',
    'intro',
    'total_participants',
    'total_quantity',
    'total_quantity_label',
  );
  foreach ($text_fields as $key => $label) {
    $field = "field_{$label}";
    $vars[$label] = $wrapper->{$field}->value();
  }
  // If there is no total yet, send default text.
  if (!isset($vars['total_quantity'])) {
    $placeholder_copy = t(variable_get('dosomething_campaign_run_no_total_copy'));
    // Replace the ['label'] section with the actual label (eg clothes or tacos).
    $copy = str_replace('[label]', $vars['total_quantity_label'], $placeholder_copy);
    $vars['total_quantity_placeholder'] = $copy;
  }

}

/**
 * Adds the $winners array to the campaign node.
 *
 * @param array $vars
 *   Array of variables via hook_preprocess_node.
 * @param int $nid
 *   Node id of the campaign run node.
 */
function dosomething_campaign_run_preprocess_winners(&$vars, $nid) {
  // If no scholarship:
  if (empty($vars['field_scholarship_amount'])) {
    // Don't display the winners section.
    $vars['display_winners'] = FALSE;
    return;
  }

  // Display the winners section.
  $vars['display_winners'] = TRUE;

  $closed_node = node_load($nid);
  // Get all winners
  $winner_count =  count($closed_node->field_winners[LANGUAGE_NONE]);
  // If there are no winners, send default text.
  if ($winner_count == 0) {
    $vars['default_winners'] = t(variable_get('dosomething_campaign_run_no_winner_copy')) ;
  }
  else {
    $winners = array();
    $text_fields = array(
      'field_winner_type',
      'field_winner_quote',
      'field_winner_description',
    );
    for ($i = 0; $i < $winner_count; $i++) {
      $entity_id = $closed_node->field_winners[LANGUAGE_NONE][$i]['value'];
      $winner =  entity_load('field_collection_item', array($entity_id));
      $winners[$i]['uid'] = $winner[$entity_id]->field_user[LANGUAGE_NONE][0]['target_id'];
      // If there is no user, get the first name from the text field.
      if (!isset($winners[$i]['uid'])) {
        $winners[$i]['fname'] = $winner[$entity_id]->field_winner_name[LANGUAGE_NONE][0]['value'];
      }
      // Else, grab the first name from the user account.
      else {
        $nsUser = dosomething_northstar_get_user(
          dosomething_user_get_northstar_id($winners[$i]['uid'])
        );

        $winners[$i]['fname'] = $nsUser->first_name;
      }

      if (isset($winner[$entity_id]->field_gallery_image[LANGUAGE_NONE])) {
        $image_nid = $winner[$entity_id]->field_gallery_image[LANGUAGE_NONE][0]['target_id'];
        $winners[$i]['image'] = dosomething_image_get_themed_image($image_nid, 'square', '400x400');
      }

      foreach($text_fields as $text_field) {
        if (isset($winner[$entity_id]->{$text_field}[LANGUAGE_NONE])) {
          $winners[$i][$text_field] = ucfirst($winner[$entity_id]->{$text_field}[LANGUAGE_NONE][0]['value']);
        }
      }
    }
    $vars['winners'] = $winners;
  }
}

/**
 * Adds the $klout_gallery array to the campaign node.
 *
 * @param array $vars
 *   Array of variables via hook_preprocess_node.
 * @param int $nid
 *   Node id of the campaign run node.
 */
function dosomething_campaign_run_preprocess_klout_gallery(&$vars, $nid) {
  $closed_node = node_load($nid);
  $klout_gallery = array();

  if (isset($closed_node->field_gallery_collection[LANGUAGE_NONE])) {

    $klout_count = count($closed_node->field_gallery_collection[LANGUAGE_NONE]);

    // Get the type of klout
    for ($i = 0; $i < $klout_count; $i++) {
      $klout_entity_id = $closed_node->field_gallery_collection[LANGUAGE_NONE][$i]['value'];
      $klout =  entity_load('field_collection_item', array($klout_entity_id));
      // Get the type of klout.
      $klout_gallery[$i]['type'] = $klout[$klout_entity_id]->field_gallery_type[LANGUAGE_NONE][0]['value'];
      $gallery_entity_id = $klout[$klout_entity_id]->field_gallery[LANGUAGE_NONE][0]['value'];
      $single_gallery = entity_load('field_collection_item', array($gallery_entity_id));
      $klout_gallery[$i]['title'] = $single_gallery[$gallery_entity_id]->field_gallery_title[LANGUAGE_NONE][0]['value'];
      $single_gallery_count = count($single_gallery[$gallery_entity_id]->field_gallery_item[LANGUAGE_NONE]);
      // Check for a Gallery Style field value:
      if (!empty($single_gallery[$gallery_entity_id]->field_gallery_style)) {
        // Store the Gallery Style key.
        $style = $single_gallery[$gallery_entity_id]->field_gallery_style[LANGUAGE_NONE][0]['value'];
      }
      else {
        $style = "-triad";
      }

      $klout_gallery[$i]['style'] = paraneue_dosomething_get_gallery_style($style);
      for ($a = 0; $a < $single_gallery_count; $a++) {
        $gallery_item_entity_id = $single_gallery[$gallery_entity_id]->field_gallery_item[LANGUAGE_NONE][$a]['value'];
        $gallery_items = entity_load('field_collection_item', array($gallery_item_entity_id));
        $image_nid = $gallery_items[$gallery_item_entity_id]->field_gallery_image[LANGUAGE_NONE][0]['target_id'];

        if ($klout_gallery[$i]['type'] == 'action') {
          $klout_gallery[$i]['items'][$a]['image'] = dosomething_image_get_themed_image($image_nid, 'square', '400x400');
        }
        else if ($klout_gallery[$i]['type'] == 'press'){
          // Smaller image for these.
          $klout_gallery[$i]['items'][$a]['image'] = dosomething_image_get_themed_image($image_nid, 'thumb', 'wmax-300-hmax-75');
        }
        else if ($klout_gallery[$i]['type'] == 'mention') {
          $klout_gallery[$i]['items'][$a]['image'] = dosomething_image_get_themed_image($image_nid, 'thumb', '300x300');
        }
        // @TODO: link this link?
        if (!empty($gallery_items[$gallery_item_entity_id]->field_image_title)) {
          $klout_gallery[$i]['items'][$a]['title'] = $gallery_items[$gallery_item_entity_id]->field_image_title[LANGUAGE_NONE][0]['title'];
          $klout_gallery[$i]['items'][$a]['url'] = $gallery_items[$gallery_item_entity_id]->field_image_title[LANGUAGE_NONE][0]['url'];
        }
        $klout_gallery[$i]['items'][$a]['desc'] = $gallery_items[$gallery_item_entity_id]->field_image_description[LANGUAGE_NONE][0]['value'];
      }
    }

  }

  $vars['klout_gallery'] = $klout_gallery;
}

/**
 * For given campaign $nid, return its current Campaign Run nid.
 *
 * @param int $nid
 *   A campaign node nid.
 *
 * @return mixed
 *   Returns the closed campaign_run node $nid if exists, FALSE if not.
 */
function dosomething_campaign_run_get_closed_run_nid($nid) {
  $node = entity_metadata_wrapper('node', $nid);
  if (isset($node->field_current_run)) {
    return (!is_null($node->field_current_run->value()->nid)) ? $node->field_current_run->value()->nid : FALSE;
  }
}

/**
 * For given Campaign Run $nid, return its parent Campaign $nid.
 *
 * @param int $nid
 *   A Campaign Run node nid.
 *
 * @return mixed
 *   Returns the parent Campaign node $nid if exists, FALSE if not.
 */
function dosomething_campaign_run_get_parent_nid($nid) {
   // Query field_data_field_campaigns for campaign_run node referencing $nid.
   $result = db_select('field_data_field_campaigns', 'c')
    ->fields('c', array('field_campaigns_target_id'))
    ->condition('entity_id', $nid)
    ->condition('bundle', 'campaign_run')
    ->condition('entity_type', 'node')
    ->execute();
  return $result->fetchField(0);
}

/**
 * Given a campaign form and form state, check to see if there is a campgin run.
 * Adds the campaign run nid to the campaign form.
 *
 * @param array $form
 *  A drupal form array of a campaign node
 * @param array $form_state
 *  A drupal form_state array of a campaign node
 */
function dosomething_campaign_run_add_campaign_run_info(&$form, &$form_state) {
  $nid = $form['nid']['#value'];
  $language = $form['field_current_run']['#language'];

  $closed_nid = dosomething_campaign_run_get_closed_run_nid($nid);

  if ($closed_nid) {
    $form['field_current_run'][$language]['#description'] = t('The current campaign run nid is ' . l($closed_nid, 'node/' . $closed_nid . '/edit/' . $language));
    return $form;
  }
}

/**
 * Implements hook_form_NODE_TYPE_alter().
 */
function dosomething_campaign_run_form_campaign_run_node_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Run Date text
  $form['#after_build'][] = 'dosomething_campaign_run_after_build';

  drupal_add_css(drupal_get_path('module', 'dosomething_campaign_run') . '/campaign_run_node.css');
}

/**
 * Customize the Run Date form
 */
function dosomething_campaign_run_after_build($form, &$form_state) {
  // Make sure we change for the relevant language
  if (!isset($form['nid']['#value'])) {
    $language = LANGUAGE_NONE;
  }
  else {
    $language_list = dosomething_global_get_language_prefix_list();
    foreach($language_list as $lang) {
      if (isset($form['field_run_date'][$lang])) {
          $language = $lang;
      }
    }
  }

  $form['field_run_date'][$language][0]['show_todate']['#title'] = t('Select End Date');

  return $form;
}

/*
 * Implements hook_node_validate()
 *
 * On the run date field on campaign run nodes, we want to store the end date as NULL
 * if the user doesn't choose to "show end date" on the form.
 * This is needed to overwrite default drupal behavior that stores the start date in the end date
 * if the user doesn't specify one explicity.
 *
 * See https://www.drupal.org/node/874322 for more on this issue.
 */
function dosomething_campaign_run_node_validate($node, $form, &$form_state) {
  if ($node->type == 'campaign_run') {
    foreach ($form_state['values']['field_run_date'] as $lang => $run_date) {
      // The show_date key will only be available on the language key
      // that correlates to the translation being saved,
      // so we need to check for it's existence and it's value.
      if (isset($run_date[0]['show_todate']) && $run_date[0]['show_todate'] == 0) {
        $form_state['values']['field_run_date'][$lang][0]['value2'] = NULL;
      }
    }
  }
}

/**
 * Implements hook_node_submit()
 */
function dosomething_campaign_run_node_submit($node, $form, &$form_state) {
  if ($node->type == 'campaign_run' && isset($form_state['entity_translation'])) {
    // Get language of the translation being submittted.
    $language = $form_state['entity_translation']['form_langcode'];
    // Grab the run dates the user just entered;
    $start_date = $form_state['values']['field_run_date'][$language][0]['value'];
    $end_date = $form_state['values']['field_run_date'][$language][0]['value2'];
    $status = dosomething_helpers_get_campaign_status($start_date, $end_date);

    // Just get the first campaign this is tied to. While we allow for multiple campaigns to be selected per campaign run, only one should be selected.
    $campaign = $form_state['values']['field_campaigns'][$language][0];
    // Update the campaign's status.
    $campaign = entity_metadata_wrapper('node', $campaign['target_id']);
    $current_run = $campaign->language($language)->field_current_run->value();
    if ($current_run->nid == $form_state['values']['nid']) {
      $campaign->language($language)->field_campaign_status = $status;
      $campaign->save();
    }
  }
}
