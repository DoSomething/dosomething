<?php
/**
 * @file
 * Code for the dosomething_signup feature.
 */
define('DOSOMETHING_SIGNUP_LOG_MOBILECOMMONS', variable_get('dosomething_signup_log_mobilecommons') ? TRUE : FALSE);
define('DOSOMETHING_SIGNUP_LOG_SIGNUPS', variable_get('dosomething_signup_log_signups') ? TRUE : FALSE);

module_load_include('php', 'dosomething_api', 'includes/ApiCache');

include_once 'dosomething_signup.features.inc';
include_once 'dosomething_signup.forms.inc';
include_once 'dosomething_signup.signup_data_form.inc';
include_once 'dosomething_signup.theme.inc';
include_once 'includes/dosomething_signup.mobilecommons.inc';
include_once 'includes/dosomething_signup.variable.inc';
include_once 'includes/dosomething_signup.cron.inc';
include_once 'dosomething_signup.query.inc';

include_once 'includes/Signup.php';
include_once 'includes/SignupsController.php';
include_once 'includes/SignupTransformer.php';

/**
 * Implements hook_menu().
 */
function dosomething_signup_menu() {
  $items = [];
  $items['admin/config/dosomething/dosomething_signup'] = array(
    'title' => t('DoSomething Signup'),
    'description' => t('Admin configuration form for DoSomething Signup.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_signup_admin_config_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_signup.admin.inc'
  );
  $items['node/%node/unsignup'] = array(
    'title' => 'Remove signup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_signup_node_unsignup_form', 1),
    'access callback' => 'dosomething_signup_node_unsignup_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 70,
  );
  $items['signup/%signup'] = array(
    'title' => 'Signup',
    'page callback' => 'dosomething_signup_view_entity',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view any signup'),
  );
  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function dosomething_signup_libraries_info() {
  $libraries['guzzle'] = array(
    'name' => 'guzzle',
    'path' => 'vendor',
    'files' => ['php' => ['autoload.php']],
    'version' => 5.0,
  );
  return $libraries;
}

/**
 * Implements hook_entity_info().
 *
 * @return  array
 */
function dosomething_signup_entity_info() {
  $info = [];

  $info['signup'] = [
    'label' => t('Signup'),
    'base table' => 'dosomething_signup',
    'entity keys' => [
      'id' => 'sid',
      'label' => 'sid',
    ],
    'entity class' => 'Signup',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'SignupsController',
    'module' => 'dosomething_signup',
  ];

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function dosomething_signup_entity_property_info() {
  $info = array();

  // Set Signup properties.
  $info['signup']['properties']['sid'] = array(
    'label' => t('Signup sid'),
    'description' => t('The unique ID of the Signup.'),
    'type' => 'integer',
    'schema field' => 'sid',
    'entity views field' => TRUE,
  );
  $info['signup']['properties']['nid'] = array(
    'label' => t('Node nid'),
    'description' => t('The node nid of the Signup.'),
    'type' => 'node',
    'schema field' => 'nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['signup']['properties']['run_nid'] = array(
    'label' => t('Run nid'),
    'description' => t('The run nid on the signup.'),
    'type' => 'node',
    'schema field' => 'run_nid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['signup']['properties']['uid'] = array(
    'label' => t('User uid'),
    'description' => t('The User uid of the Signup.'),
    'type' => 'user',
    'schema field' => 'uid',
    'required' => TRUE,
    'entity views field' => TRUE,
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['signup']['properties']['timestamp'] = array(
    'label' => t('Created Date'),
    'description' => t('Date the Signup was created.'),
    'type' => 'date',
    'required' => TRUE,
    'schema field' => 'timestamp',
    'setter callback' => 'entity_property_verbatim_set',
  );
  $info['signup']['properties']['source'] = array(
    'label' => t('Source'),
    'description' => t('Referring Signup source.'),
    'type' => 'text',
    'required' => TRUE,
    'schema field' => 'source',
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function dosomething_signup_permission() {
  return array(
    'administer third party communication' =>  array(
      'title' => t('Administer Third Party Communications'),
      'description' => t('Manage Mobile Commons/MailChimp Opt-in IDs.'),
    ),
    'edit any signup' =>  array(
      'title' => t('Edit any signup'),
      'description' => t('Edit any signup.'),
    ),
    'view any signup' =>  array(
      'title' => t('View any signup'),
      'description' => t('View any signup.'),
    ),
  );
}

/**
 * Menu autoloader for /signup.
 */
function signup_load($id) {
  // Load signup from rogue.
  $response = dosomething_rogue_get_activity([
    'filter' => [
      'id' => $id
    ],
  ]);

  return isset($response['data']) && count($response['data']) === 1 ? $response['data'][0] : FALSE;
}

/**
 * Callback for /signup/ID page.
 */
function dosomething_signup_view_entity($entity) {
  return entity_view('signup', array($entity->sid => $entity), 'full');
}

/**
 * Implements hook_admin_paths().
 */
function dosomething_signup_admin_paths() {
  $paths = array(
    'node/*/signups' => TRUE,
    'node/*/signupscsv' => TRUE,
    'signup/*' => TRUE,
  );
  return $paths;
}

/**
 * Checks if a source parameter has been passed into query string and returns it.
 */
function dosomething_signup_get_query_source() {
  if (isset($_GET['source'])) {
    return check_plain($_GET['source']);
  }
  elseif (drupal_match_path($path = current_path(), 'reportback/*')) {
    return $path;
  }
  return NULL;
}

/**
 * Insert a user signup.
 *
 * @param int $nid
 *   The node nid the user has signed up for.
 * @param int $uid
 *   (optional) The user uid who has signed up.
 *   If not provided, uses global $user->uid.
 * @param string $source
 *   (optional) Signup source.
 * @param string $source_details
 *   (optional) Signup source details (e.g. taken from the query string).
 * @param int $timestamp
 *   (optional) The timestamp of the signup.
 *   If not provided, uses @dries time.
 * @param bool $transactionals
 *   (optional) A flag to disable sending transactional messaging.
 *   The default is to send messaging.
 *
 * @return mixed
 *   The sid of the newly inserted signup, or FALSE if error.
 */
function dosomething_signup_create($nid, $uid = NULL, $source = NULL, $source_details = NULL, $timestamp = NULL, $transactionals = TRUE) {
  global $user;

  if (!isset($uid)) {
    $uid = $user->uid;
  }

  // @TODO: If the campaign is closed, return error.
  // @TODO: If campaign is unpublished and non-staff $uid, return error.

  $campaign = Campaign::get($nid);
  $campaign_node = node_load($nid);
  $run = dosomething_helpers_get_current_campaign_run_for_user($nid, $user, $campaign);
  $account = user_load($uid);

  $values = [
    'nid' => $nid,
    'uid' => $uid,
    'run_nid' => $run->nid,
    'source'=> $source,
    'source_details' => $source_details,
    'timestamp' => $timestamp,
    'transactionals' => $transactionals,
  ];

  // If a signup already exists, return the signup ID.
  if ($existing_id = dosomething_signup_exists($nid, $run->nid, $uid)) {
    return $existing_id;
  }

  // Create signup in Rogue.
  $response = dosomething_rogue_send_signup_to_rogue($values, $account);

  $sid = $response ? $response['data']['signup_id'] : NULL;
  _dosomething_signup_log_signup($sid, $source);

  return $sid ? $sid : FALSE;
}

/**
 * Log details when creating a signup.
 *
 * @param $sid
 * @param $source
 */
function _dosomething_signup_log_signup($sid, $source = '') {
  if (! module_exists('stathat')) {
    return;
  }

  if (is_null($sid)) {
    // Keep message general in case a user ever sees it.
    drupal_set_message(t("There was an error processing your request."));

    // Log the error.
    watchdog('dosomething_signup', $e, array(), WATCHDOG_ERROR);
  }

  // The source is often a string longer than just "reportback", but always starts with it if the page is a permalink
  if (strpos($source, 'reportback') === 0) {
    stathat_send_ez_count('drupal - Signup - permalink signup', 1);
  }
}

/**
 * Delete a user signup.
 *
 * @param  int   $nid
 * @param  null  $run_nid
 * @param  null  $uid
 * @return bool
 */
function dosomething_signup_delete_signup($nid, $run_nid = NULL, $uid = NULL) {
  $sid = dosomething_signup_exists($nid, $run_nid, $uid);

  try {
    if ($sid) {
      entity_delete('signup', $sid);
    }
    return TRUE;
  }
  catch (Exception $e) {
    watchdog('dosomething_signup', $e, [], WATCHDOG_ERROR);
  }

  return FALSE;
}

/**
 * Checks if a signup record exists.
 *
 * @param  int  $nid
 *   The node nid of the signup record to check.
 * @param  int  $run_nid
 *   The run nid of the signup record to check.
 * @param  int  $uid
 *   Optional - the user uid of signup record to check.
 *   If not given, uses global $user->uid.
 * @param  string  $presignup
 *   Optional - If true, query the presignups table, not regular signups.
 * @return int|false
 *   The sid of signup exists, FALSE if it doesn't exist.
 */
function dosomething_signup_exists($nid, $run_nid = NULL, $uid = NULL, $presignup = FALSE) {
  if (!isset($uid)) {
    global $user;
    $uid = $user->uid;
  }
  else {
    $user = user_load($uid);
  }

  if (!isset($run_nid)) {
    $run = dosomething_helpers_get_current_campaign_run_for_user($nid, $user);
    $run_nid = $run->nid;
  }

  $response = dosomething_rogue_get_activity([
    'filter' => [
      'northstar_id' => dosomething_user_get_northstar_id($uid),
      'campaign_id' => $nid,
      'campaign_run_id' => $run_nid,
    ],
  ]);

  $has_signup = isset($response['data']) && count($response['data']) === 1;

  return $has_signup ? $response['data'][0]['signup_id'] : FALSE;
}

/**
 * Implements hook_views_data().
 */
function dosomething_signup_views_data() {
  // Define dosomething_signup table.
  $data['dosomething_signup']['table']['group'] = t('Signups');
  $data['dosomething_signup']['table']['base'] = array(
    'field' => 'sid',
    'title' => t('Signups'),
    'help' => t('Dosomething Signups table.'),
    'weight' => -10,
  );
  $data['dosomething_signup']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
    'users' => array(
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );

  $data['dosomething_signup']['sid'] = array(
    'title' => t('Signup sid'),
    'help' => t('Signup sid that references a signup.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'dosomething_signup',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup Sid'),
    ),
  );
  $data['dosomething_signup']['nid'] = array(
    'title' => t('Nid'),
    'help' => t('Signup node nid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'node',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup Node Nid'),
    ),
  );
  $data['dosomething_signup']['run_nid'] = array(
    'title' => t('Run nid'),
    'help' => t('Signup node run nid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'node',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup Node Run Nid'),
    ),
  );
  $data['dosomething_signup']['uid'] = array(
    'title' => t('Uid'),
    'help' => t('User id.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'users',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup User'),
    ),
  );
  $data['dosomething_signup']['timestamp'] = array(
    'title' => t('Date submitted'),
    'help' => t('Date submitted.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  $data['dosomething_signup']['source'] = array(
    'title' => t('Signup source'),
    'help' => t('Referring source for the signup.'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  return $data;
}

/**
 * Signup a user $uid for a given node $nid and display a confirmation message.
 *
 * This is most likely being within a form submit handler, hence displaying the
 * confirmation message.
 *
 * @param int $nid
 *   The node nid the user is signing up for.
 * @param object $account
 *   (optional) The user object to sign up.
 *   If not provided, uses global $user.
 * @param string $source
 *   (optional) The signup source.
 * @param string $source_details
 *   (optional) The signup source details (e.g. taken from the query string).
 */
function dosomething_signup_user_signup($nid, $account = NULL, $source = NULL, $params = [], $source_details = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }

  // Insert signup.
  $sid = dosomething_signup_create($nid, $account->uid, $source, $source_details);

  if ($sid && $params) {
    if (isset($params['affiliate_messaging_opt_in']) && $params['affiliate_messaging_opt_in']) {
      dosomething_campaign_create_affiliate_messaging_opt_in($account, $nid);
    }
  }

  // Opt into competition if auto opt-in is enabled for this campaign.
  $auto_opt_in = dosomething_helpers_get_variable('node', $nid, 'enable_auto_competition_opt_in');

  if ($auto_opt_in) {
    $run = dosomething_helpers_get_current_campaign_run_for_user($nid, $account);

    dosomething_gladiator_send_user_to_gladiator($account, ['nid' => $nid, 'run_nid' => $run->nid]);
  }

  // Set default signup message if we're still in this function.
  if (!empty($sid) || !empty($rogue_signup)) {
    $node = node_load($nid);
    dosomething_signup_set_signup_message($node->title);
  }
}

/**
 * Sets Drupal message for a signup for given $title.
 *
 * @param string $title
 *   Optional - Title of whatever user has signed up for.
 */
function dosomething_signup_set_signup_message($title = NULL) {
  // If title exists:
  if ($title) {
    // Prepare it for the message.
    $title = ' ' . t("for") . ' <em>' . $title . '</em>';
  }
  $message = t("You're signed up") . $title . '! ';
  $message .=  t("Get started below.");
  drupal_set_message($message);
}

/**
 * Returns the confirmation message after submitting presignup form.
 *
 * @param string $title
 *   The title of the presignup node.
 *
 * @return string
 */
function dosomething_signup_set_presignup_message($title) {
  $link = l(t('find a campaign'), 'campaigns');
  $message = t("Sweet, we'll send you an email as soon as @title re-opens. In the meantime, !link you can do right now.", array(
    '@title' => $title,
    '!link' => $link,
  ));
  drupal_set_message($message);
}

/**
 * Returns total number of Signups based on supplied set of filters.
 *
 * @param array $filters
 * @return int
 */
function dosomething_signup_get_signup_total_by_filters(array $filters = []) {
  $unneccessaryFilters = ['count', 'page'];

  $filters = dosomething_helpers_unset_array_keys($filters, $unneccessaryFilters);

  $parameters = dosomething_helpers_convert_filters_to_url_parameters($filters);
  $parameters['cache'] = TRUE;

  $cache = new ApiCache();

  $total = $cache->get('signups-tally', $parameters);

  if ($total) {
    $total = $total->data;
  }
  else {
    $total = dosomething_signup_get_signups_query($filters, TRUE);

    $cache->set('signups-tally', $parameters, $total);
  }

  return (int) $total;
}

/**
 * Returns array of campaign nid's that a user has signed up for.
 *
 * @param int $uid
 *   The user uid to return signups for.
 *
 * @return array
 *   Array of node nid's.
 */
function dosomething_signup_get_signup_nids_by_uid($uid) {
  $query = db_select('dosomething_signup', 's');
  $query->join('node', 'n', 'n.nid = s.nid');
  $query->fields('s', array('nid'));
  $query->condition('s.uid', $uid);
  // Only return signups for campaign nodes.
  $query->condition('n.type', 'campaign');
  $query->orderBy('timestamp', 'DESC');
  $result = $query->execute();
  return array_keys($result->fetchAllAssoc('nid'));
}

/**
 * Access callback for node unsignup page.
 *
 * @param object $node
 *   Loaded node to unsignup from.
 *
 * @return bool
 *   Whether or not logged in user can remove signup (and if it exists).
 */
function dosomething_signup_node_unsignup_access($node) {
  // Only display for node types that implement signup forms.
  if ($node->type == 'campaign') {
    // Only allow access if user staff and is signed up.
    return dosomething_user_is_staff() && dosomething_signup_exists($node->nid);
  }
  return FALSE;
}

/**
 * Checks if the current page should create a signup upon login.
 *
 * @return mixed
 *   Returns the node $nid to create signup for if TRUE, else returns NULL.
 */
function dosomething_signup_get_login_signup_nid() {
  $obj = menu_get_object();
  if (isset($obj->type)) {
    switch ($obj->type) {
      case 'campaign':
        if (module_exists('dosomething_campaign') && dosomething_campaign_get_campaign_type($obj) != 'sms_game') {
          return $obj->nid;
        }
        break;
      default:
        return NULL;
    }
  }
  elseif (drupal_match_path($path = current_path(), 'reportback/*')) {
    $reportback = reportback_load(arg(1));
    return $reportback->nid;
  }
  return NULL;
}

/**
 * Insert a pre-signup for the global $user.
 *
 * @param int $nid
 *   The node nid the user has pre-signed up for.
 *
 * @return mixed
 *   The sid of the newly inserted signup, or FALSE if error.
 */
function dosomething_signup_presignup_create($nid) {
  // If a pre-signup does not exist already:
  if (!dosomething_signup_presignup_exists($nid)) {
    global $user;
    // Insert one.
    $sid = db_insert('dosomething_signup_presignup')
      ->fields(array(
        'nid' => $nid,
        'uid' => $user->uid,
        'timestamp' =>  REQUEST_TIME,
      ))
      ->execute();
  }
}

/**
 * Checks if a pre-signup exists for given $nid for global $user.
 *
 * @param  int  $nid
 * @return mixed
 */
function dosomething_signup_presignup_exists($nid) {
  global $user;
  return dosomething_signup_exists($nid, NULL, $user->uid, $presignup = TRUE);
}

/**
 * Presignup the global $user for given $nid.
 */
function dosomething_signup_user_presignup($nid) {
  // Create the presignup record.
  dosomething_signup_presignup_create($nid);
  // @todo: Mailchimp subscription.
  // For now, we know the presignup always lives on the node we're presigning up for.
  $title = drupal_get_title();
  // Set the confirmation message.
  dosomething_signup_set_presignup_message($title);
}

/*
 * Get the total number of campaign signups.
 *
 * @param int $nid
 *   A campaign node id.
 * @return int $result
 *   The number of users who signedup for a camapgin.
 */
function dosomething_signup_get_signup_total_by_nid($nid) {
  $result = db_select('dosomething_signup', 's')
    ->fields('s', array('sid'))
    ->condition('nid', $nid)
    ->execute();
  $signup_count = $result->rowCount();
  dosomething_helpers_set_variable('node', $nid, 'signup_count', $signup_count);
  return $signup_count;
}

/**
 * Handles a SMS Game Signup Form signup.
 *
 * @param string $sms_game_type
 *   Expected values: 'single_player' | 'multi_player'.
 * @param array $values
 *   Values to use for the signup request.
 *   @see dosomething_signup_sms_game_form()
 */
function dosomething_signup_sms_game_signup_request($sms_game_type, $values) {
  if ($sms_game_type == 'single_player') {
    // Send opt_in request to Mobilecommons API.
    return dosomething_signup_mobilecommons_opt_in_friends($values);
  }
  // Default to multi-player signup:
  dosomething_signup_sms_game_multi_player_signup_request($values);
}

/**
 * Posts to to the Multi-player SMS Game URL with relevant $values.
 *
 * @param array @values
 */
function dosomething_signup_sms_game_multi_player_signup_request($values) {
  // Initialize post data.
  $data = array();
  $data_vars = array(
    'alpha_first_name',
    'alpha_mobile',
    'beta_mobile_0',
    'beta_mobile_1',
    'beta_mobile_2',
    'story_id',
    'story_type',
  );
  foreach ($data_vars as $var) {
    if(isset($values[$var])) {
      $data[$var] = $values[$var];
    }
  }
  $options = array(
    'method' => 'POST',
    'data' => drupal_http_build_query($data),
    'timeout' => 60,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );

  $url = variable_get('dosomething_signup_sms_game_multiplayer_endpoint');
  $response = drupal_http_request($url, $options);

  if (DOSOMETHING_SIGNUP_LOG_SIGNUPS) {
    $log = json_encode($response);
    watchdog('dosomething_signup_sms_game_multi_player_signup_request', $log);
  }
  return $response;
}

/**
 * For a given $source_string, find the target node to create the signup for.
 *
 * @param string $source_string
 *   The string that will be used as the new Signup's source.
 *
 * @return
 *   Integer if the $source_string refers to a target node, or NULL if not.
 */
function dosomething_signup_get_target_nid_for_source($source_string) {
  // Current invite codes use an exciting "signup/:sid" format.
  $source_parts = explode('/', $source_string);
  // Check if this source is a signup.
  if (!empty($source_parts)) {
    if ($source_parts[0] == 'signup' && is_numeric($source_parts[1])) {
      // Find the node the source signup is associated with.
      if ($source_signup = signup_load((int) $source_parts[1])) {
        return $source_signup->nid;
      }
    }
  }
  return NULL;
}
