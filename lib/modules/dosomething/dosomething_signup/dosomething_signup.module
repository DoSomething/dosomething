<?php
/**
 * @file
 * Code for the dosomething_signup feature.
 */

include_once 'dosomething_signup.features.inc';

/**
 * Insert a user signup.
 *
 * @param int $nid
 *   The node nid the user has signed up for.
 * @param int $uid
 *   Optional - the user uid who has signed up.
 *   If not provided, uses global $user->uid.
 *
 * @return mixed
 *   The sid of the newly inserted signup, or FALSE if error.
 */
function dosomething_signup_insert($nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  try {
    $sid = db_insert('dosomething_signup')
        ->fields(array(
          'uid' => $uid,
          'nid' => $nid,
          'timestamp' => REQUEST_TIME,
        )
      )
      ->execute();
    return $sid;
  }
  catch (Exception $e) {
    // Keep message general in case a user ever sees it.
    drupal_set_message(t("There was an error processing your request."));
    // Log the error.
    watchdog('dosomething_signup', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Delete a user signup.
 *
 * @param int $nid
 *   The node nid of the signup record to be deleted.
 * @param int $uid
 *   Optional - the user uid of signup record to be deleted.
 *   If not given, uses global $user->uid.
 */
function dosomething_signup_delete($nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  try {
    db_delete('dosomething_signup')
      ->condition('uid', $uid)
      ->condition('nid', $nid)
      ->execute();
  }
  catch (Exception $e) {
    watchdog('dosomething_signup', $e, array(), WATCHDOG_ERROR);
  }
}

/**
 * Checks if a signup record exists.
 *
 * @param int $nid
 *   The node nid of the signup record to check.
 * @param int $uid
 *   Optional - the user uid of signup record to check.
 *   If not given, uses global $user->uid.
 *
 * @return mixed
 *   The sid of signup exists, FALSE if it doesn't exist.
 */
function dosomething_signup_exists($nid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  $result = db_select('dosomething_signup', 's')
    ->condition('uid', $uid)
    ->condition('nid', $nid)
    ->fields('s', array('sid'))
    ->execute();
  $sid = $result->fetchField(0);
  // If a sid was found, return it.
  if (is_numeric($sid)) {
    return $sid;
  }
  // Otherwise return FALSE.
  return FALSE;
}

/**
 * Form constructor for user signup form.
 *
 * Displayed for an authenticated user to signup for a node.
 *
 * @param int $nid
 *   The node nid to signup for.
 * @param string $label
 *   The label to display on the form submit button.
 */
function dosomething_signup_form($form, &$form_state, $nid, $label) {
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $label,
    '#attributes' => array(
      'class' => array(
        'btn',
        'medium',
      ),
    ),
  );
  return $form;
}

/**
 * Form submission handler for dosomething_signup_form().
 *
 * @see dosomething_signup_form()
 */
function dosomething_signup_form_submit($form, &$form_state) {
  // Shouldn't be able to submit form as anonymous user, but check.
  if (!user_is_logged_in()) {
    drupal_set_message("Please sign in first.");
    return;
  }
  $nid = $form_state['values']['nid'];
  dosomething_signup_user_signup($nid);
}

/**
 * Implements hook_views_data().
 */
function dosomething_signup_views_data() {
  // Define dosomething_signup table.
  $data['dosomething_signup']['table']['group'] = t('Signups');
  $data['dosomething_signup']['table']['base'] = array(
    'field' => 'sid',
    'title' => t('Signups'),
    'help' => t('Dosomething Signups table.'),
    'weight' => -10,
  );
  $data['dosomething_signup']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
    'users' => array(
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );
  $data['dosomething_signup']['nid'] = array(
    'title' => t('Nid'),
    'help' => t('Signup node nid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'node',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup Node Nid'),
    ),
  );
  $data['dosomething_signup']['uid'] = array(
    'title' => t('Uid'),
    'help' => t('User id.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'users',
      'handler' => 'views_handler_relationship',
      'label' => t('Signup User'),
    ),
  );
  $data['dosomething_signup']['timestamp'] = array(
    'title' => t('Date submitted'),
    'help' => t('Date submitted.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  return $data;
}

/**
 * Implements hook_user_view().
 */
function dosomething_signup_user_view($account, $view_mode, $langcode) {
  // Output user signups.
  $account->content['campaigns'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Campaigns'),
    '#markup' => views_embed_view('user_signups', 'block', $account->uid),
  );
}

/**
 * Signup a user $uid for a given node $nid.
 *
 * @param int $nid
 *   The node nid the user is signing up for.
 * @param object account
 *   Optional - the user object to sign up.
 *   If not provided, uses global $user.
 */
function dosomething_signup_user_signup($nid, $account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  // If a signup already exists, exit.
  if (dosomething_signup_exists($nid, $account->uid)) { return; }

  // Insert signup.
  if ($sid = dosomething_signup_insert($nid, $account->uid)) {
    $node = node_load($nid);
    // Opt-in to mobilecommons.
    dosomething_signup_mobilecommons_opt_in($account, $node->title);
    // Send external message request
    $params = array(
      'nid' => $nid
    );
    if (module_exists('dosomething_user')) {
      dosomething_user_send_message_request('campaign_signup', $params);
    }
    // Set success message.
    $message = t("You're signed up!") . '<br />';
    $message .= t("Get started with") . ' ' . $node->title .'  ' . t("below!");
    drupal_set_message($message);
  }
}


/**
 * Sends a Mobilecommons API request to opt-in user with given campaign title.
 *
 * @param object $account
 *   The user object of user to opt-in.
 * @param string $title
 *   The campaign title the user has signed up for.
 */
function dosomething_signup_mobilecommons_opt_in($account, $title) {
  // Make sure mobilecommons module is enabled.
  if (!module_exists('mobilecommons')) { return; }

  // If user doesn't have mobile number, exit function.
  $mobile = dosomething_user_get_mobile($account);
  if (!$mobile) { return; }

  try {
    // @todo: Move $config / new MobileCommons($config) code
    // into a new function in the contrib mobilecommons.module.
    libraries_load('mobilecommons-php');
    $config = array(
      'username' => variable_get('mobilecommons_api_auth_email'),
      'password' => variable_get('mobilecommons_api_auth_password'),
    );
    $MobileCommons = new MobileCommons($config);
    // Next get prepare the opt-in request.
    $args = array(
      // All campaigns use this opt-in path for now.
      'opt_in_path' => variable_get('dosomething_signup_mobilecommons_opt_in', 164453),
      'person[phone]' => $mobile,
      'person[campaign_name]' => $title,
      // Expected format is YYYY-MM-DD.
      'person[date_of_birth]' => dosomething_user_get_birthdate('Y-m-d'),
    );
    $response = $MobileCommons->opt_in($args);
  }
  catch (Exception $e) {
    // Log the error.
    watchdog('dosomething_signup', $e, array(), WATCHDOG_ERROR);
  }
}

/**
 * Returns array of nid's that a user has signed up for.
 *
 * @param int $uid
 *   The user uid of signup record to check.
 *
 * @return array
 *   Array of node nid's.
 */
function dosomething_signup_get_signup_nids_by_uid($uid) {
  $query = db_select('dosomething_signup', 's');
  $query->fields('s', array('nid'));
  $query->condition('uid', $uid);
  $result = $query->execute();
  return array_keys($result->fetchAllAssoc('nid'));
}
