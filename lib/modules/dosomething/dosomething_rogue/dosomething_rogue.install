<?php
/**
 * @file
 * Installation and schema hooks for dosomething_rogue.module
 */

/**
 * Implements hook_schema().
 */
function dosomething_rogue_schema() {
  $schema = [];

  $schema['dosomething_rogue_reportbacks'] = [
    'description' => 'Table for tracking phoenix rbid and fids and their corresponding rogue reportback and item ids',
    'fields' => [
      'fid' => [
        'description' => 'The fid of the reportback item as it is stored in phoenix.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'rogue_item_id' => [
        'description' => 'The fid of the reportback item as it is stored in rogue.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'rbid' => [
        'description' => 'The rbid as it is stored in phoenix.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'rogue_reportback_id' => [
        'description' => 'The id of the same reportback in rogue.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'created_at' => [
        'description' => 'The Unix timestamp of when the reportback was stored',
        'type' => 'int',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['fid'],
    'indexes' => [
      'rbid' => ['rbid'],
      'rogue_reportback_id' => ['rogue_reportback_id'],
      'rogue_item_id' => ['rogue_item_id'],
    ],
  ];

  $schema['dosomething_rogue_failed_task_log'] = [
    'description' => 'Table of failed requests sending reportbacks from Phoenix to Rogue',
    'fields' => [
      'id' => [
        'description' => 'Primary key of log table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'drupal_id' => [
        'description' => 'The drupal_id of the user.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'campaign_id' => [
        'description' => 'Campaign nid for the reportback.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'campaign_run_id' => [
        'description' => 'Campaign run nid for the reportback.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'quantity' => [
        'description' => 'The quantity of reportback_nouns reportback_verbed.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'why_participated' => [
        'description' => 'Why the user participated in the campaign.',
        'type' => 'text',
        'length' => '2048',
        'not null' => TRUE,
      ],
      'file' => [
        'description' => 'The file string to save of the reportback image.',
        'type' => 'text',
        'length' => '500000',
        'not null' => FALSE,
      ],
      'caption' => [
        'description' => 'File caption.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'timestamp' => [
        'description' => 'The Unix timestamp of the request.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'response_code' => [
        'description' => 'The HTTP response code from Rogue.',
        'type' => 'int',
      ],
      'response_values' => [
        'description' => 'The JSON response from Rogue.',
        'type' => 'text',
        'length' => '500000',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'drupal_id' => ['drupal_id'],
      'campaign_id' => ['campaign_id'],
      'campaign_run_id' => ['campaign_run_id'],
    ],
  ];

  $schema['dosomething_rogue_signups'] = [
    'description' => 'Table for tracking phoenix sid and corresponding rogue signups id and event id',
    'fields' => [
      'sid' => [
        'description' => 'The sid of the signup as it is stored in phoenix.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'rogue_signup_id' => [
        'description' => 'The signup id as it is stored in rogue.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'created_at' => [
        'description' => 'The Unix timestamp of when the reportback was stored',
        'type' => 'int',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['sid'],
    'indexes' => [
      'rbid' => ['rogue_signup_id'],
    ],
  ];

  $schema['dosomething_rogue_failed_migrations'] = [
    'description' => 'Table of failed requests during the export-activity-to-rogue migration',
    'fields' => [
      'id' => [
        'description' => 'Primary key of log table.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'sid' => [
        'description' => 'The sid of the signup.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'northstar_id' => [
        'description' => 'The northstar_id of the user.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'campaign_id' => [
        'description' => 'Campaign nid for the signup.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'campaign_run_id' => [
        'description' => 'Campaign run nid for the signup.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'signup_source' => [
        'description' => 'Source of the signup.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'signup_created_at' => [
        'description' => 'Timestamp (Rogue format) of when the signup was created.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'signup_updated_at' => [
        'description' => 'Timestamp (Rogue format) of when the signup was updated.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'quantity' => [
        'description' => 'The approved quantity.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'quantity_pending' => [
        'description' => 'The pending or flagged quantity.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'why_participated' => [
        'description' => 'Why the user participated in the campaign.',
        'type' => 'text',
        'length' => '2048',
        'not null' => FALSE,
      ],
      'photo_source' => [
        'description' => 'Source of the reportback file.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'remote_addr' => [
        'type' => 'varchar',
        'length' => '45',
        'description' => 'The IP address of the user that submitted the file.',
        'not null' => FALSE
      ],
      'caption' => [
        'description' => 'File caption.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'status' => [
        'description' => 'The status of the reportback item.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'file' => [
        'description' => 'The file string to save of the reportback image.',
        'type' => 'text',
        'length' => '500000',
        'not null' => FALSE,
      ],
      'photo_created_at' => [
        'description' => 'Timestamp (Rogue format) of when the reportback item was created.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
      'timestamp' => [
        'description' => 'The Unix timestamp of when the request failed.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'response_code' => [
        'description' => 'The HTTP response code from Rogue.',
        'type' => 'int',
        'not null' => FALSE,
      ],
      'response_values' => [
        'description' => 'The JSON response from Rogue.',
        'type' => 'text',
        'length' => '500000',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'campaign_id' => ['campaign_id'],
      'campaign_run_id' => ['campaign_run_id'],
    ],
  ];

  return $schema;
}

/**
 * Create rogue reportback table.
 */
function dosomething_rogue_update_7001(&$sandbox) {
  $table_name = 'dosomething_rogue_reportbacks';
  if (!db_table_exists($table_name)) {
    $schema = dosomething_rogue_schema();
    db_create_table($table_name, $schema[$table_name]);
  }
}

/**
 * Create dosomething_rogue_failed_task_log table.
 */
function dosomething_rogue_update_7002(&$sandbox) {
  $table_name = 'dosomething_rogue_failed_task_log';
  if (!db_table_exists($table_name)) {
    $schema = dosomething_rogue_schema();
    db_create_table($table_name, $schema[$table_name]);
  }
}

/**
 * Adds rogue_item_id, status, and type columns to dosomething_rogue_failed_task_log table.
 * Changes schema so drupal_id, campaign_id, campaign_run_id, quantity, why_participated are not required.
 */
function dosomething_rogue_update_7003(&$sandbox) {
  $table_name = 'dosomething_rogue_failed_task_log';
  if (db_table_exists($table_name)) {
    $rogue_item_id_spec = [
      'type' => 'int',
      'description' => 'The fid of the reportback item as it is stored in phoenix.',
    ];

    db_add_field($table_name, 'rogue_item_id', $rogue_item_id_spec);

    $new_text_fields = [
      'status' => 'The updated status of the reportback item.',
      'type' => 'Either reportback if POST to the /reportbacks Rogue endpoint or reportback item a PUT to the /items Rogue endpoint.'
    ];

    foreach ($new_text_fields as $field => $description) {
      $text_spec = [
        'type' => 'text',
        'description' => $description,
      ];

      db_add_field($table_name, $field, $text_spec);
    }

    $not_required_int_columns = [
      'drupal_id' => 'The drupal_id of the user.',
      'campaign_id' => 'Campaign nid for the reportback.',
      'campaign_run_id' => 'Campaign run nid for the reportback.',
      'quantity' => 'The quantity of reportback_nouns reportback_verbed.'
    ];

    foreach ($not_required_int_columns as $field => $description) {
      $not_required_spec = [
        'type' => 'int',
        'description' => $description,
        'not null' => FALSE
      ];

      db_change_field($table_name, $field, $field, $not_required_spec);
    }

    $why_participated_spec = [
      'type' => 'text',
      'description' => 'Why the user participated in the campaign.',
      'length' => '2048',
      'not null' => FALSE,
    ];

    db_change_field($table_name, 'why_participated', 'why_participated', $why_participated_spec);
  }
}

/**
 * Adds cropping columns to dosomething_rogue_failed_task_log table.
 */
function dosomething_rogue_update_7004(&$sandbox) {
  $table_name = 'dosomething_rogue_failed_task_log';
   $new_fields = [
    'crop_x' => 'X coordinates of cropped rb item image.',
    'crop_y' => 'Y coordinates of cropped rb item image.',
    'crop_width' => 'Crop width of cropped rb item image.',
    'crop_height' => 'Crop height of cropped rb item image.',
    'crop_rotate' => 'Rotate info of cropped rb item image.'
  ];

  foreach ($new_fields as $field => $description) {
    $spec = [
      'type' => 'int',
      'description' => $description,
    ];

    db_add_field($table_name, $field, $spec);
  }
}

/**
 * Adds northstar_id in dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_update_7005(&$sandbox) {
  $table_name = 'dosomething_rogue_failed_task_log';
  if (db_table_exists($table_name)) {
    $spec = [
      'description' => 'The northstar_id of the user.',
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ];
    if (! db_field_exists($table_name, 'northstar_id')) {
      db_add_field($table_name, 'northstar_id', $spec);
    }
  }
}

/**
 * Add indexes to failed log table.
 */
function dosomething_rogue_update_7006(&$sandbox) {
  $table = 'dosomething_rogue_failed_task_log';
  $columns = ['drupal_id', 'campaign_id', 'campaign_run_id'];
  foreach ($columns as $column) {
    if (!db_index_exists($table, $column)) {
      db_add_index($table, $column, [$column]);
    }
  }
}

/**
 * Adds source, remote_addr, failed_at, and tries columns to dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_update_7007(&$sandbox) {
  $table = 'dosomething_rogue_failed_task_log';
  if (db_table_exists($table)) {
    $new_fields = [
      'source' => [
        'type' => 'text',
        'description' => 'Where the user reported back from.',
      ],
      'remote_addr' => [
        'type' => 'varchar',
        'length' => '45',
        'description' => 'The IP address of the user that submitted the file.',
      ],
      'failed_at' => [
        'type' => 'int',
        'description' => 'The Unix timestamp at which the reportback first fails to send to Rogue.',
      ],
      'tries' => [
        'type' => 'int',
        'description' => 'The number of attempts the reportback is sent to Rogue.',
      ],
    ];

    foreach ($new_fields as $field => $spec) {
      db_add_field($table, $field, $spec);
    }
  }
}

/**
 * Adds reviewer column to the dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_update_7008(&$sandbox) {
  $table = 'dosomething_rogue_failed_task_log';
  if (db_table_exists($table)) {
    $reviewer_spec = [
      'type' => 'varchar',
      'length' => '255',
      'description' => 'The Northstar id of reviewer who updated the reportback item.',
    ];

    db_add_field($table, 'reviewer', $reviewer_spec);
  }
}

/**
 * Changes rogue_reportback_id column to rogue_signup_id in the dosomething_rogue_reportbacks table.
 */
function dosomething_rogue_update_7009(&$sandbox) {
  $table = 'dosomething_rogue_reportbacks';
  if (db_table_exists($table)) {
    $rogue_signup_id_spec = [
      'type' => 'int',
      'length' => '11',
      'description' => 'The Rogue signup id that is associated with the same Phoenix reportback.',
    ];

    db_change_field($table, 'rogue_reportback_id', 'rogue_signup_id', $rogue_signup_id_spec);

    $rogue_event_id_spec = [
      'type' => 'int',
      'length' => '11',
      'description' => 'The Rogue event id that is associated with the same Phoenix reportback item (fid).',
    ];

    db_change_field($table, 'rogue_item_id', 'rogue_event_id', $rogue_event_id_spec);
  }
}

/**
 * Changes rogue_item_id column to rogue_event_id in the dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_update_7010(&$sandbox) {
  $table = 'dosomething_rogue_failed_task_log';
  if (db_table_exists($table)) {
    $spec = [
      'description' => 'The event id of the reportback item as it is stored in rogue.',
      'type' => 'int',
      'length' => '11',
    ];

    db_change_field($table, 'rogue_item_id', 'rogue_event_id', $spec);
  }
}

/**
 * Adds dosomething_rogue_signups table.
 */
function dosomething_rogue_update_7011(&$sandbox) {
  $table_name = 'dosomething_rogue_signups';
  if (!db_table_exists($table_name)) {
    $schema = dosomething_rogue_schema();
    db_create_table($table_name, $schema[$table_name]);
  }
}

/**
 * Adds dosomething_rogue_failed_migrations table.
 */
function dosomething_rogue_update_7012(&$sandbox) {
  $table_name = 'dosomething_rogue_failed_migrations';
  if (!db_table_exists($table_name)) {
    $schema = dosomething_rogue_schema();
    db_create_table($table_name, $schema[$table_name]);
  }
}

/**
 * Adds rbid and fid column to dosomething_rogue_failed_migrations.
 */
function dosomething_rogue_update_7013(&$sandbox) {
  $table = 'dosomething_rogue_failed_migrations';
  if (db_table_exists($table)) {
    $rbid_spec = [
      'description' => 'The rbid as it is stored in phoenix.',
      'type' => 'int',
      'not null' => FALSE,
    ];

    if (! db_field_exists($table, 'rbid')) {
      db_add_field($table, 'rbid', $rbid_spec);
    }

    $fid_spec = [
      'description' => 'The fid of the reportback item as it is stored in phoenix.',
      'type' => 'int',
      'not null' => FALSE,
    ];

    if (! db_field_exists($table, 'fid')) {
      db_add_field($table, 'fid', $fid_spec);
    }
  }
}

/**
 * Change rogue_event_id to rogue_post_id in dosomething_rogue_reportbacks.
 */
function dosomething_rogue_update_7014(&$sandbox) {
  $table = 'dosomething_rogue_reportbacks';
  if (db_table_exists($table)) {
    $spec = [
      'description' => 'The post id of the reportback item as it is stored in rogue.',
      'type' => 'int',
      'length' => '11',
    ];


    if (db_field_exists($table, 'rogue_event_id')) {
      db_change_field($table, 'rogue_event_id', 'rogue_post_id', $spec);
    }
  }
}

/**
 * remove dosomething_rogue_reportbacks tables
 */
function dosomething_rogue_update_7015(&$sandbox) {
  $tables = ['dosomething_rogue_reportbacks', 'dosomething_rogue_failed_migrations', 'dosomething_rogue_signups'];

  foreach ($tables as $table) {
    if (db_table_exists($table)) {
      db_drop_table($table);
    }
  }

  $result = db_truncate('dosomething_rogue_failed_task_log')->execute();
}
