<?php

/**
 * @file
 * Code for the dosomething_rogue feature.
 */
module_load_include('php', 'dosomething_signup', 'includes/SignupTransformer');

include_once('dosomething_rogue.admin.inc');
include_once('dosomething_rogue.cron.inc');
include_once('includes/Rogue.php');

define('ROGUE_API_URL', variable_get('dosomething_rogue_url', 'http://rogue.test/api'));
define('ROGUE_API_VERSION', variable_get('dosomething_rogue_api_version', 'v1'));
define('ROGUE_API_KEY', variable_get('dosomething_rogue_api_key', 'abc123'));

/*
 * Implements hook_menu()
 *
 */
function dosomething_rogue_menu() {
  $items = [];

  $items['admin/config/services/rogue'] = [
    'title' => 'Rogue API Settings',
    'description' => 'Manage Rogue connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_rogue_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_rogue.admin.inc',
  ];

  // Return the $items array to register the path
  return $items;
}

/**
 * Build the Guzzle HTTP Client to make requests to Rogue.
 *
 * https://github.com/DoSomething/rogue
 */
function dosomething_rogue_client() {
  return new Rogue(ROGUE_API_URL . '/',
    ['headers' => ['X-DS-Rogue-API-Key' => ROGUE_API_KEY]]
  );
}

/**
  * Send a GET request to return all reportback items matching a given
  * query from Rogue.
  *
  * @param array $inputs
  */
function dosomething_rogue_get_reportback_items($inputs)
{
  $client = dosomething_rogue_client();

  $response = $client->getAllReportbacks($inputs);

  return $response;
}

/**
  * Send a GET request to return all posts matching a given
  * query from Rogue.
  *
  * @param array $inputs
  */
function dosomething_rogue_get_posts($inputs)
{
  $client = dosomething_rogue_client();

  $response = $client->getPosts($inputs);

  return $response;
}

/**
 * Send a GET request to return all activity matching a given
 * query from Rogue.
 *
 * @param array $query
 * @return array
 */
function dosomething_rogue_get_activity($query)
{
  return dosomething_rogue_client()->getActivity($query);
}

/**
  * Format a response from Rogue's GET /activity to match
  * the response from Phoenix's GET /signups
  *
  * @param array $inputs
  */
function dosomething_rogue_format_activity($response)
{
  $data = [];

  if ($response) {
    $query = drupal_get_query_parameters();
    $current_page = $query['page'];

    // Set next page
    if (is_null($current_page)) {
      $query['page'] = 2;
    } else {
      $query['page'] = $query['page'] + 1;
    }

    $next_uri = url(current_path(), ['absolute' => TRUE, 'query' => $query]);

    // Set previous page
    if ($current_page < 2) {
      $prev_uri = null;
    } else {
      $query['page'] = $current_page - 1;

      $prev_uri = url(current_path(), ['absolute' => TRUE, 'query' => $query]);
    }

    // Include meta data
    $data['meta'] = [
      'pagination' => [
        'total' => $response['meta']['pagination']['total'],
        'per_page' => $response['meta']['pagination']['per_page'],
        'current_page' => $response['meta']['pagination']['current_page'],
        'total_pages' => $response['meta']['pagination']['total_pages'],
        'links' => [
          'prev_uri' => $prev_uri,
          'next_uri'=> $next_uri,
        ],
      ],
    ];

    $data['data'] = [];

    // Format each signup
    foreach ($response['data'] as $signup) {
      $signup_data = dosomething_rogue_format_signup($signup);

      // Add data to the overall response
      array_push($data['data'], $signup_data);
    }

    return json_encode($data);
  }
}

/**
  * Format a response from Rogue's GET /activity to match
  * the response from Phoenix's GET /signups/:sid
  *
  * @param array $signup
  */
function dosomething_rogue_format_signup($signup) {
  // Get campaign and run information for the signup data response
  $northstar_user = dosomething_northstar_get_user($signup['northstar_id']);

  // Get campaign information
  $drupal_user = dosomething_user_get_user_by_northstar_id($signup['northstar_id']);

  try {
    $campaign_run = dosomething_helpers_get_current_campaign_run_for_user($signup['campaign_id'], $drupal_user); // get errors when calling this sometimes (500 - no campaign data found)
  } catch(Exception $e) {
    // the regular Phoenix endpoint doesn't seem to handle exceptions like these so we just set the run to null if there is an exception
    $campaign_run = null;
  }

  $campaign_run_nid = $campaign_run->nid;

  $current = ($signup['campaign_run_id'] == $campaign_run_nid) ? true : false;

  if (isset($campaign_run->field_run_date['en'][0])) {
    $current_run_start = $campaign_run->field_run_date['en'][0]['value'];
    $current_run_end = $campaign_run->field_run_date['en'][0]['value2'];
  }
  else {
    $current_run_start = NULL;
    $current_run_end = NULL;
  }

  try {
    $campaign = Campaign::get($signup['campaign_id']);
  } catch (Exception $e) {
    $campaign = node_load($signup['campaign_id']);
  }

  $campaign_data = (new SignupTransformer)->transformCampaign((object) $campaign);

  $user_data = (new SignupTransformer)->transformUser((object) $northstar_user);

  // Format the data for each signup
  $signup_data = [
    // SIGNUP
    'id' => $signup['signup_id'],
    'created_at' => strtotime($signup['created_at']),

    // CAMPAIGN RUN
    'campaign_run' => [
      'id' => $campaign_run_nid,
      'current' => $current,
      'timing' => [
        'start' => $current_run_start,
        'end' => $current_run_end,
      ],
    ],
    'uri' => null,

    // CAMPAIGN - no changes
    'campaign' => $campaign_data,

    // USER - no changes
    'user' => $user_data,
  ];

  // REPORTBACK IS CONDITIONAL
  if (array_key_exists('posts', $signup) && !empty($signup['posts']['data'])) {
    $reportback_data = [
        'id' => $signup['signup_id'],
        'created_at' => strtotime($signup['created_at']),
        'updated_at' => strtotime($signup['updated_at']),
        'quantity' => $signup['quantity'],
        'uri' => null,
        'why_participated' => $signup['why_participated'],
        'flagged' => null,
    ];

    // Add data for each reportback item
    $reportback_item_array = [];
    foreach ($signup['posts']['data'] as $post) {
      $post_data = [
        'id' => $post['id'],
        'status' => dosomething_rogue_transform_rogue_status_to_phoenix_status($post['status']),
        'caption' => $post['media']['caption'],
        'uri' => null,
        'media' => [
          'uri' => $post['media']['url'],
          'type' => 'image',
        ],
        'created_at' => strtotime($post['created_at']),
        'kudos' => [
          'data' => [],
        ],
      ];

      // Include reaction data if there is any
      if (count($post['reactions']) > 0) {
        $post_data['kudos']['data'] = [
          '641' => [
            'term' => [
              'id' => '641',
              'name' => 'heart',
              'total' => count($post['reactions']),
            ],
            'current_user' => null,
          ]
        ];
      }

      array_push($reportback_item_array, $post_data);
    }

    // Include total number of items in the response
    $reportback_data['reportback_items']['total'] = count($reportback_item_array);

    // Add reportback item data to reportback portion of response
    $reportback_data['reportback_items']['data'] = $reportback_item_array;

    // Add reportback data to the response for this signup
    $signup_data['reportback'] = $reportback_data;
  } else {
    $signup_data['reportback'] = null;
  }

  return $signup_data;
}

/**
 * Sends a reportback to Rogue.
 *
 * @param array $values
 *    Values to send to Rogue.
 * @param object $user
 *    Drupal user object of user that reported back.
 * @param int $failed_task_id
 *    Index of failed reportback item if it exists in the dosomething_rogue_failed_task_log.
 */
function dosomething_rogue_send_reportback_to_rogue($values, $user = NULL, $failed_task_id = NULL) {
  if (!isset($user)) {
    global $user;
  }

  $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

  // Band-aid fix for an issue we are seeing with phoenix not being
  // aware of a user's northstar id. If it doesn't find one, we just grab it
  // from northstar directly.
  if (!$northstar_id) {
    $northstar_user = dosomething_northstar_get_user($user->uid, 'drupal_id');
    $northstar_id = $northstar_user->id;
  }

  $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid']);
  $client = dosomething_rogue_client();

  $data = dosomething_rogue_transform_reportback($values, $user, $northstar_id);
  $data['type'] = 'reportback';
  $data['event_type'] = 'post_photo';

  try {
    $response = $client->postReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback sent - count', 1);
    }
    if (!$response) {
      // This is a 404
      dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user);
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user, $e);
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    dosomething_rogue_handle_failure($data, $response, $failed_task_id, $user, $e);
  }

  return $response;
}

/**
 * Sends updated reportback item(s) to Rogue.
 *
 * @param array $data
 *    Values to send to Rogue.
 * @param int $failed_task_id
 *    Index of failed reportback item if it exists in the dosomething_rogue_failed_task_log.
 *
 */
function dosomething_rogue_update_rogue_reportback_items($data, $failed_task_id = NULL) {
  $client = dosomething_rogue_client();
  try {
    $response = $client->updateReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback items(s) updated status sent - count', count($data));
    }

    if (!$response) {
      foreach ($data as $values) {
        $values['type'] = 'reportback item';
        dosomething_rogue_handle_failure($values, $response, $failed_task_id);
      }
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $failed_task_id, $e);
    }
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $failed_task_id, $e);
    }
  }

  return $response;
}

/**
 * Query to find Rogue reportback item id by Phoenix fid.
 *
 * @param string $fid
 * Phoenix fid of reportback item.
 *
 */
function dosomething_rogue_get_by_file_id($fid) {
  return db_query("SELECT rogue_rbs.rogue_post_id FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE fid = :fid", array(':fid' => $fid))->fetchAll();
}

/**
 * Query to find Rogue signup id by Phoenix sid.
 *
 * @param string $sid
 * Phoenix sid of signup.
 *
 */
function dosomething_rogue_get_signup_by_sid($sid) {
  return db_query("SELECT rogue_signups.rogue_signup_id FROM {dosomething_rogue_signups} rogue_signups WHERE sid = :sid", array(':sid' => $sid))->fetchAll();
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param string $rbid
 * @param string $fid
 * @param object $rogue_reportback
 *
 * @return
 */
function dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback) {
  if (! dosomething_rogue_get_by_file_id($fid)) {

    // Store references to rogue IDs.
    db_insert('dosomething_rogue_reportbacks')
    ->fields([
      'fid' => $fid,
      'rogue_post_id' => $rogue_reportback['data']['id'],
      'rbid' => $rbid,
      'rogue_signup_id' => $rogue_reportback['data']['signup_id'],
      'created_at' => REQUEST_TIME,
      ])
    ->execute();
  }
}

/**
 * Given a phoenix status, transform that into the corresponding rogue status
 * @param  string $status phoenix item status
 * @return string
 */
function dosomething_rogue_transform_status($status) {
  if ($status === 'promoted' || $status === 'approved' || $status === 'excluded') {
    return 'accepted';
  }
  else if ($status === 'pending') {
    return 'pending';
  }
  else {
    return 'rejected';
  }
}

/**
 * Given a Rogue status, transform that into the corresponding Phoenix status
 * @param  string $status phoenix item status
 * @return string
 */
function dosomething_rogue_transform_rogue_status_to_phoenix_status($status) {
  if ($status === 'accepted') {
    return 'approved';
  }
  else if ($status === 'pending') {
    return 'pending';
  }
  else {
    return 'flagged';
  }
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param array  $values
 * @param array  $response
 * @param object $e
 * @param int $failed_task_id
 * @param object $user
 *
 */
function dosomething_rogue_handle_failure($values, $response = NULL, $failed_task_id = NULL, $user = NULL, $e = NULL) {
  if (module_exists('stathat')) {
      if ($values['type'] === 'reportback') {
        stathat_send_ez_count('drupal - Rogue - reportback failed - count', 1);
      } else {
        stathat_send_ez_count('drupal - Rogue - reportback item status failed - count', 1);
      }
  }

  // If the reportback has previously failed, do not enter a new record.
  // Instead, increment the number of tries and update the time of most recent attempt to send to Rogue.
  if (! is_null($failed_task_id)) {
    $previously_failed = array_pop(dosomething_rogue_previously_failed($failed_task_id));
    update_failed_task_log($previously_failed);
  } else {
    insert_failed_task_into_failed_task_log($values, $response, $e, $user);
  }

  // Save fail to a db log so we can easily export.
  if ($values['type'] === 'reportback') {
    watchdog('dosomething_rogue', 'Reportback not migrated to Rogue: northstar_id: !northstar_id, campaign_id: !campaign_id, campaign run_nid: !campaign_run_id.', ['!northstar_id' => $values['northstar_id'], '!campaign_id' => $values['campaign_id'], '!campaign_run_id' => $values['campaign_run_id']], WATCHDOG_ERROR);
  } else {
    watchdog('dosomething_rogue', 'Reportback item status not migrated to Rogue: Rogue item id: !rogue_item_id, status: !status.', ['!rogue_item_id' => $values['rogue_event_id'], '!status' => $values['status']], WATCHDOG_ERROR);
  }
}

/**
 * Insert record that stores the request data of to a signup that did
 * not successfully post to Rogue
 *
 * @param array  $values
 * @param array  $response
 * @param int $failed_task_id
 * @param object $user
 * @param object $e
 *
 */
function dosomething_rogue_handle_signup_failure($values, $response = NULL, $failed_task_id = NULL, $user = NULL, $e = NULL) {
  if (module_exists('stathat')) {
    stathat_send_ez_count('drupal - Rogue - signup failed - count', 1);
  }

  // If the signup has previously failed, do not enter a new record.
  // Instead, increment the number of tries and update the time of most recent attempt to send to Rogue.
  if (! is_null($failed_task_id)) {
    $previously_failed = array_pop(dosomething_rogue_previously_failed($failed_task_id));
    update_failed_task_log($previously_failed);
  } else {
    insert_failed_task_into_failed_task_log($values, $response, $e, $user);
  }

  // Save fail to a db log so we can easily export.
  watchdog('dosomething_rogue', 'Signup not migrated to Rogue: northstar_id: !northstar_id, campaign_id: !campaign_id, campaign run_nid: !campaign_run_id.', ['!northstar_id' => $values['northstar_id'], '!campaign_id' => $values['campaign_id'], '!campaign_run_id' => $values['campaign_run_id']], WATCHDOG_ERROR);
}

/**
 * Query to see if a reportback exists in Rogue by Phoenix $rbid.
 *
 * @param string $rbid
 * Phoenix $rbid of reportback.
 *
 */
function dosomething_rogue_rb_exists_in_rogue($rbid) {
  return db_query("SELECT * FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE rbid = :rbid", array(':rbid' => $rbid))->fetchAll();
}

/**
 * Checks to see if the given RB data exists in Phoenix and if so stores in Rogue reference table.
 *
 * @param array $rogue_reportback
 * The response from dosomething_rogue_send_reportback_to_rogue().
 *
 */
function dosomething_rogue_check_rbid_and_store_ref($rogue_reportback) {
  $rbid = dosomething_reportback_exists($rogue_reportback['data']['campaign_id'], $rogue_reportback['data']['campaign_run_id'], NULL, $rogue_reportback['data']['northstar_id']);

  // Make sure the reportback exists before we try to use it
  if ($rbid) {
    // Load the reportback
    $reportback = entity_load_unchanged('reportback', [$rbid]);

    // Get the most recently added file
    $fid = array_pop($reportback->fids);

    // Make sure that file is not in the Rogue reference table yet
    if (!dosomething_rogue_get_by_file_id($fid)) {
      // Store reference to the rb in rogue
      dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback);
    }

    // The data needed to pass to the permalink page
    $data = [
      'rbid' => $rbid,
      'fid'  => $fid,
    ];

    return $data;
  }

  return false;
}

  /**
  * Transform reportback into the appropriate scheme to send to Rogue.
  *
  * @param $values - Reportback values to send to Rogue.
  * @param $user - Loaded drupal user
  * @param $northstar_id - User's Northstar user id.
  * @return array
  */
 function dosomething_rogue_transform_reportback($values, $user, $northstar_id) {
   if ($values['nid']) {
     $campaign_id = $values['nid'];
   }
   elseif ($values['campaign_id']) {
     $campaign_id = $values['campaign_id'];
   }

   $run = dosomething_helpers_get_current_campaign_run_for_user($campaign_id);

   $data = [
     'northstar_id' => $northstar_id,
     'drupal_id' => $user->uid,
     'campaign_id' => $campaign_id,
     'campaign_run_id' => $run->nid,
     'quantity' => $values['quantity'],
     'why_participated' => $values['why_participated'],
     'file' => isset($values['file']) ? $values['file'] : NULL,
     'caption' => isset($values['caption']) ? $values['caption'] : NULL,
     'status' => isset($values['status']) ? $values['status'] : 'pending',
     'source' => isset($values['source']) ? $values['source'] : NULL,
     'type' => isset($values['type']) ? $values['type'] : NULL,
     'remote_addr' => dosomething_helpers_ip_address(),
   ];

   if (isset($values['crop_x'])) {
    $cropped_values = dosomething_helpers_extract_values_by_keys($values, ['crop_x', 'crop_y', 'crop_width', 'crop_height', 'crop_rotate']);
    $data = array_merge($data, $cropped_values);
   }

   return $data;
 }

/**
 * Query to check get previously failed reportback item from dosomething_rogue_failed_task_log.
 *
 * @param int $id
 *
 */
function dosomething_rogue_previously_failed($id) {
  return db_query("SELECT * FROM {dosomething_rogue_failed_task_log} failed_rbs WHERE id = :id", array(':id' => $id))->fetchAll();
}

/**
 * Update the timestamp and tries in the dosomething_rogue_failed_task_log for a failed reportback item.
 *
 * @param object $previously_failed
 *
 */
function update_failed_task_log($previously_failed) {
  // Increment the number of tries the cron job attempted to send failed record to Rogue.
  $incremented_tries = $previously_failed->tries + 1;

  db_update('dosomething_rogue_failed_task_log')
    ->fields([
      'tries' => $incremented_tries,
      'timestamp' => REQUEST_TIME,
    ])
    ->condition('id', $previously_failed->id)
    ->execute();
}

/**
 * Insert failed task into dosomething_rogue_failed_task_log.
 *
 * @param array $values
 * @param object $user
 * @param object $response
 * @param object $e
 *
 */
function insert_failed_task_into_failed_task_log($values, $response = NULL, $e = NULL, $user = NULL) {
  if ($values['type'] === 'reportback') {
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'drupal_id' => $user->uid,
        'campaign_id' => $values['campaign_id'],
        'campaign_run_id' => $values['campaign_run_id'],
        'quantity' => $values['quantity'],
        'why_participated' => $values['why_participated'],
        'file' => $values['file'],
        'caption' => $values['caption'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        'crop_x' => $values['crop_x'],
        'crop_y' => $values['crop_y'],
        'crop_width' => $values['crop_width'],
        'crop_height' => $values['crop_height'],
        'crop_rotate' => $values['crop_rotate'],
        'northstar_id' => $values['northstar_id'],
        'source' => $values['source'],
        'remote_addr' => $values['remote_addr'],
        'failed_at' => REQUEST_TIME,
      ])
      ->execute();
  } elseif ($values['type'] === 'signup') {
      db_insert('dosomething_rogue_failed_task_log')
          ->fields([
            'northstar_id' => $values['northstar_id'],
            'campaign_id' => $values['campaign_id'],
            'campaign_run_id' => $values['campaign_run_id'],
            'source' => $values['source'],
            'timestamp' => REQUEST_TIME,
            'response_code' => (isset($response->code)) ? $response->code : NULL,
            'response_values' => (isset($e)) ? $e->getMessage() : NULL,
            'type' => $values['type'],
            'failed_at' => REQUEST_TIME,
          ])
          ->execute();
  } else {
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'rogue_event_id' => $values['rogue_event_id'],
        'status' => $values['status'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        'failed_at' => REQUEST_TIME,
        'reviewer' => $values['reviewer'],
      ])
      ->execute();
  }
}

/**
 * Send a signup to Rogue
 *
 * @param array $values
 * @param object $user
 * @param object $response
 * @param object $e
 *
 */
function dosomething_rogue_send_signup_to_rogue($values, $user = NULL, $failed_task_id = NULL) {
  // Get the user in order to grab the northstar id
  if (!isset($user)) {
    global $user;
  }

  $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

  // Band-aid fix for an issue we are seeing with phoenix not being
  // aware of a user's northstar id. If it doesn't find one, we just grab it
  // from northstar directly.
  // @TODO: Investigate why this is happening.
  if (!$northstar_id) {
    $northstar_user = dosomething_northstar_get_user($user->uid, 'drupal_id');
    $northstar_id = $northstar_user->id;
  }

  $client = dosomething_rogue_client();

  $data = dosomething_rogue_transform_signup($values, $northstar_id, $user);
  $data['type'] = 'signup';
  try {

    $response = $client->postSignup($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - signup sent - count', 1);
    }
    if (!$response) {
      // This is a 404
      dosomething_rogue_handle_signup_failure($data, $response, $failed_task_id, $user);
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    dosomething_rogue_handle_signup_failure($data, $response, $failed_task_id, $user, $e);
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    dosomething_rogue_handle_signup_failure($data, $response, $failed_task_id, $user, $e);
  }

  return $response;
}

/**
* Transform signup into the appropriate scheme to send to Rogue.
*
* @param $values - Signup values to send to Rogue.
* @param $northstar_id - User's Northstar user id.
* @return array
*/
function dosomething_rogue_transform_signup($values, $northstar_id, $user) {
  // Make sure we have the data in the right form (failed table stores campaign_id, not nid)
  if (isset($values['nid'])) {
    $values['campaign_id'] = $values['nid'];
  }

  $run = dosomething_helpers_get_current_campaign_run_for_user($values['campaign_id'], $user);

  $data = [
    'northstar_id' => $northstar_id,
    'campaign_id' => $values['campaign_id'],
    'campaign_run_id' => $run->nid,
    'source' => $values['source'],
    'source_details' => $values['source_details'],
  ];

 return $data;
}

/**
 * Insert record that stores reference to the signup in
 * phoenix and corresponding signup id in Rogue
 *
 * @param string $sid
 * @param object $rogue_signup
 *
 * @return
 */
function dosomething_rogue_store_rogue_signup_references($sid, $rogue_signup) {
  if (! dosomething_rogue_get_signup_by_sid($sid)) {
    // Store references to rogue IDs.
    db_insert('dosomething_rogue_signups')
    ->fields([
      'sid' => $sid,
      'rogue_signup_id' => $rogue_signup['data']['signup_id'],
      'created_at' => REQUEST_TIME,
      ])
    ->execute();
  }
}

/**
 * Insert record that stores all the information for the failed migration request
 *
 * @param array  $values
 * @param int    $sid
 * @param array  $response
 * @param object $e
 *
 */
function dosomething_rogue_handle_migration_failure($values, $sid, $rbid = NULL, $fids = NULL, $response = NULL, $e = NULL) {
  // one row for each photo, just the sid if no northstar id, or just the signup info
  // When trying to send a file but there is no northstar id
  if (empty($values) && isset($fids)) {
      db_insert('dosomething_rogue_failed_migrations')
      ->fields([
        // Signup
        'sid' => $sid,

        // Reportback
        'rbid' => $rbid,

        // Files
        'fid' => $fids,

        // Fail data
        'timestamp' => REQUEST_TIME,
      ])
      ->execute();
  } elseif (!isset($values)) {
      db_insert('dosomething_rogue_failed_migrations')
      ->fields([
        // Signup
        'sid' => $sid,

        // Fail data
        'timestamp' => REQUEST_TIME,
      ])
      ->execute();
      // keeper upper script when sending just a post
  } elseif (array_key_exists('file', $values)) {
      db_insert('dosomething_rogue_failed_migrations')
      ->fields([
        // Signup
        'sid' => $sid,
        'northstar_id' => $values['northstar_id'],
        'campaign_id' => $values['campaign_id'],
        'campaign_run_id' => $values['campaign_run_id'],

        // Reportback
        'rbid' => $rbid,

        // Files
        'fid' => $fids,
        'photo_source' => $values['source'],
        'remote_addr' => $values['remote_addr'],
        'caption' => $values['caption'],
        'status' => $values['status'],
        'file' => $values['file'],
        'photo_created_at' => $values['created_at'],

        // Fail data
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
      ])
      ->execute();
    } elseif (array_key_exists('photo', $values)) {
      foreach ($values['photo'] as $photo) {
        db_insert('dosomething_rogue_failed_migrations')
        ->fields([
          // Signup
          'sid' => $sid,
          'northstar_id' => $values['northstar_id'],
          'campaign_id' => $values['campaign_id'],
          'campaign_run_id' => $values['campaign_run_id'],
          'signup_created_at' => $values['created_at'],
          'signup_updated_at' => $values['updated_at'],
          'signup_source' => $values['source'],

          // Reportback
          'quantity' => $values['quantity'],
          'quantity_pending' => $values['quantity_pending'],
          'why_participated' => $values['why_participated'],
          'rbid' => $rbid,

          // Files
          'fid' => array_shift($fids),
          'photo_source' => $photo['source'],
          'remote_addr' => $photo['remote_addr'],
          'caption' => $photo['caption'],
          'status' => $photo['status'],
          'file' => $photo['file'],
          'photo_created_at' => $photo['created_at'],

          // Fail data
          'timestamp' => REQUEST_TIME,
          'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
          'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        ])
        ->execute();
      }
    } elseif (array_key_exists('admin_northstar_id', $values)) {
       // Store review
       db_insert('dosomething_rogue_failed_migrations')
        ->fields([
          // Signup
          'sid' => $sid,
          'northstar_id' => $values['admin_northstar_id'],
          'status' => $values['status'],
          'fid' => $fids,
          'rbid' => $rbid,

          // Fail data
          'timestamp' => REQUEST_TIME,
          'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
          'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        ])
        ->execute();
    } else {
     db_insert('dosomething_rogue_failed_migrations')
      ->fields([
        // Signup
        'sid' => $sid,
        'northstar_id' => $values['northstar_id'],
        'campaign_id' => $values['campaign_id'],
        'campaign_run_id' => $values['campaign_run_id'],
        'signup_created_at' => $values['created_at'],
        'signup_updated_at' => $values['updated_at'],
        'signup_source' => $values['source'],

        // Fail data
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
      ])
      ->execute();
  }
}

/**
 * Get count of posts under a signup.
 *
 * @param array $rogue_signup
 * @param int $count|null
 *
 * @return
 */
function dosomething_rogue_get_post_count($rogue_signup) {
  return $rogue_signup['posts'] ? count($rogue_signup['posts']['data']) : null;
}
