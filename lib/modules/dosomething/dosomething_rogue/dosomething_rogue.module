<?php

/**
 * @file
 * Code for the dosomething_rogue feature.
 */

include_once('dosomething_rogue.admin.inc');
include_once('dosomething_rogue.cron.inc');
include_once('includes/Rogue.php');

define('ROGUE_API_URL', variable_get('dosomething_rogue_url', 'http://rogue.app/api'));
define('ROGUE_API_VERSION', variable_get('dosomething_rogue_api_version', 'v1'));
define('ROGUE_API_KEY', variable_get('dosomething_rogue_api_key', 'abc123'));

/*
 * Implements hook_menu()
 *
 */
function dosomething_rogue_menu() {
  $items = [];

  $items['admin/config/services/rogue'] = [
    'title' => 'Rogue API Settings',
    'description' => 'Manage Rogue connection settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dosomething_rogue_config_form'),
    'access arguments' => array('administer modules'),
    'file' => 'dosomething_rogue.admin.inc',
  ];

  // Return the $items array to register the path
  return $items;
}

/**
 * Build the Guzzle HTTP Client to make requests to Rogue.
 *
 * https://github.com/DoSomething/rogue
 */
function dosomething_rogue_client() {
  return new Rogue(ROGUE_API_URL . '/' . ROGUE_API_VERSION . '/',
    ['headers' => ['X-DS-Rogue-API-Key' => ROGUE_API_KEY]]
  );
}

/**
 * Sends a reportback to Rogue.
 *
 * @param array $values
 *   Values to send to Rogue.
 */
function dosomething_rogue_send_reportback_to_rogue($values, $user = NULL) {
  if (!isset($user)) {
    global $user;
  }

  $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

  // Band-aid fix for an issue we are seeing with phoenix not being
  // aware of a user's northstar id. If it doesn't find one, we just grab it
  // from northstar directly.
  if (!$northstar_id) {
    $northstar_user = dosomething_northstar_get_user($user->uid, 'drupal_id');
    $northstar_id = $northstar_user->id;
  }

  $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid']);

  $client = dosomething_rogue_client();

  $data = [
    'northstar_id' => $northstar_id,
    'drupal_id' => $user->uid,
    'campaign_id' => $values['nid'],
    'campaign_run_id' => $run->nid,
    'quantity' => $values['quantity'],
    'why_participated' => $values['why_participated'],
    'file' => isset($values['file']) ? $values['file'] : NULL,
    'caption' => isset($values['caption']) ? $values['caption'] : NULL,
    'status' => isset($values['status']) ? $values['status'] : 'pending',
    'crop_x' => $values['crop_x'],
    'crop_y' => $values['crop_y'],
    'crop_width' => $values['crop_width'],
    'crop_height' => $values['crop_height'],
    'crop_rotate' => $values['crop_rotate'],
    'source' => isset($values['source']) ? $values['source'] : NULL,
  ];

  $values['type'] = 'reportback';
  $values['northstar_id'] = $northstar_id;

  try {
    $response = $client->postReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback sent - count', 1);
    }
    if (!$response) {
      // This is a 404
      dosomething_rogue_handle_failure($values, $response, $e, $user);
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    dosomething_rogue_handle_failure($values, $response, $e, $user);
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    dosomething_rogue_handle_failure($values, $response, $e, $user);
  }

  return $response;
}

/**
 * Sends updated reportback item(s) to Rogue.
 *
 * @param array $data
 * Values to send to Rogue.
 *
 */
function dosomething_rogue_update_rogue_reportback_items($data)
{
  $client = dosomething_rogue_client();
  try {
    $response = $client->updateReportback($data);

    if (module_exists('stathat')) {
      stathat_send_ez_count('drupal - Rogue - reportback items(s) updated status sent - count', count($data));
    }
    if (!$response) {
      foreach ($data as $values) {
        $values['type'] = 'reportback item';
        dosomething_rogue_handle_failure($values, $response);
      }
    }
  }
  catch (GuzzleHttp\Exception\ServerException $e) {
    // These aren't yet caught by Gateway
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $e);
    }
  }
  catch (DoSomething\Gateway\Exceptions\ApiException $e) {
    foreach ($data as $values) {
      $values['type'] = 'reportback item';
      dosomething_rogue_handle_failure($values, $response, $e);
    }
  }

  return $response;
}

/**
 * Query to find Rogue reportback item id by Phoenix fid.
 *
 * @param string $fid
 * Phoenix fid of reportback item.
 *
 */
function dosomething_rogue_get_by_file_id($fid)
{
  return db_query("SELECT rogue_rbs.rogue_item_id FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE fid = :fid", array(':fid' => $fid))->fetchAll();
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param string $rbid
 * @param string $fid
 * @param object $rogue_reportback
 *
 * @return InsertQuery object
 */
function dosomething_rogue_store_rogue_references($rbid, $fid, $rogue_reportback)
{
  $most_recent_rogue_item = array_pop($rogue_reportback['data']['reportback_items']['data']);

  // Store references to rogue IDs.
  return db_insert('dosomething_rogue_reportbacks')
    ->fields(array(
      'fid' => $fid,
      'rogue_item_id' => $most_recent_rogue_item['id'],
      'rbid' => $rbid,
      'rogue_reportback_id' => $rogue_reportback['data']['id'],
      'created_at' => REQUEST_TIME,
      ))
    ->execute();
}

/**
 * Insert record that stores reference to the most recent uploaded reportback item in
 * phoenix and it's corresponding id's in Rogue
 *
 * @param array  $values
 * @param array  $response
 * @param object $e
 * @param object $user
 *
 */
function dosomething_rogue_handle_failure($values, $response = NULL, $e = NULL, $user = NULL)
{
  if (module_exists('stathat')) {
      if ($values['type'] === 'reportback') {
        stathat_send_ez_count('drupal - Rogue - reportback failed - count', 1);
      } else {
        stathat_send_ez_count('drupal - Rogue - reportback item status failed - count', 1);
      }
  }

  // Save fail to a db log so we can easily export.
  if ($values['type'] === 'reportback') {
    $run = dosomething_helpers_get_current_campaign_run_for_user($values['nid']);
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'drupal_id' => $user->uid,
        'campaign_id' => $values['nid'],
        'campaign_run_id' => $run->nid,
        'quantity' => $values['quantity'],
        'why_participated' => $values['why_participated'],
        'file' => $values['file'],
        'caption' => $values['caption'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
        'crop_x' => $values['crop_x'],
        'crop_y' => $values['crop_y'],
        'crop_width' => $values['crop_width'],
        'crop_height' => $values['crop_height'],
        'crop_rotate' => $values['crop_rotate'],
        'northstar_id' => $values['northstar_id'],
      ])
      ->execute();

    watchdog('dosomething_rogue', 'Reportback not migrated to Rogue: northstar_id: !northstar_id, campaign_id: !campaign_id, campaign run_nid: !campaign_run_id.', ['!northstar_id' => $values['northstar_id'], '!campaign_id' => $values['nid'], '!campaign_run_id' => $run->nid], WATCHDOG_ERROR);
  } else {
    db_insert('dosomething_rogue_failed_task_log')
      ->fields([
        'rogue_item_id' => $values['rogue_reportback_item_id'],
        'status' => $values['status'],
        'type' => $values['type'],
        'timestamp' => REQUEST_TIME,
        'response_code' => (isset($response->code)) ? $response->code : NULL, // @TODO: this is currently null until there a better way to get it from Gateway
        'response_values' => (isset($e)) ? $e->getMessage() : NULL,
      ])
      ->execute();

    watchdog('dosomething_rogue', 'Reportback item status not migrated to Rogue: Rogue item id: !rogue_item_id, status: !status.', ['!rogue_item_id' => $values['rogue_reportback_item_id'], '!status' => $values['status']], WATCHDOG_ERROR);
  }
}

/**
 * Query to see if a reportback exists in Rogue by Phoenix $rbid.
 *
 * @param string $rbid
 * Phoenix $rbid of reportback.
 *
 */
function dosomething_rogue_rb_exists_in_rogue($rbid)
{
  return db_query("SELECT * FROM {dosomething_rogue_reportbacks} rogue_rbs WHERE rbid = :rbid", array(':rbid' => $rbid))->fetchAll();
}

/**
 * Sends a reaction to Rogue.
 *
 * @param array $values
 *   Values to send to Rogue. (just the FID)
 */
function dosomething_rogue_send_reaction_to_rogue($fid, $user = NULL) 
{
  // Get rogue item id by fid
  $rogue_item_id = dosomething_rogue_get_by_file_id($fid);

  // Only try to send to Rogue if the item exists there
  if (isset($rogue_item_id[0])) {
    // Get the actual rogue_item_id from the query result
    $rogue_item_id = $rogue_item_id[0]->rogue_item_id;

    // Get the user who left the reaction
    if (!isset($user)) {
      global $user;
    }

    $northstar_id = dosomething_user_get_field('field_northstar_id', $user);

    $client = dosomething_rogue_client();

    $data = [
      'northstar_id' => $northstar_id ? $northstar_id : NULL,
      'reportback_item_id' => $rogue_item_id,
    ];
    // Send to Rogue
    try {
      $response = $client->postReaction($data);

      if (module_exists('stathat')) {
        stathat_send_ez_count('drupal - Rogue - reaction sent - count', 1);
      }
      if (!$response) {
        // This is a 404
        if (module_exists('stathat')) {
          stathat_send_ez_count('drupal - Rogue - reaction failed - count', 1);
        }
      }
    }
    catch (GuzzleHttp\Exception\ServerException $e) {
      // These aren't yet caught by Gateway
      if (module_exists('stathat')) {
          stathat_send_ez_count('drupal - Rogue - reaction failed - count', 1);
        }
    }
    catch (DoSomething\Gateway\Exceptions\ApiException $e) {
      if (module_exists('stathat')) {
          stathat_send_ez_count('drupal - Rogue - reaction failed - count', 1);
      }
    }
  }
}