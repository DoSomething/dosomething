<?php
/**
 * @file
 * Code for the DoSomething User feature.
 */

include_once 'dosomething_user.features.inc';

/**
 * Implements hook_node_access().
 */
function dosomething_user_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  // Internal content types to be viewed by staff only:
  $staff_types = array('fact', 'image');
  // If viewing an internal staff type:
  if (in_array($type, $staff_types) && $op == 'view') {
    // If staff user, able to view the Fact node.
    if (dosomething_user_is_staff($account)) {
      return NODE_ACCESS_ALLOW;
    }
    // Otherwise, no facts for you.
    return NODE_ACCESS_DENY;
  }
}

 /**
  * Confirms that a specific cell phone number is valid.
  *
  * A valid phone number is a number with either 10 or 11 digits
  * (as long as the first digit is a "1").
  * Valid phone numbers do not have 3 consecutive 5's in any part, nor do they
  * use punctuation where there should be numbers.  Phone numbers also
  * do not have 9 consecutive, equal digits (e.g. 999-999-9999).
  *
  * @code
  *  dosomething_user_valid_cell('123-456-7890');
  *  # => true
  *  dosomething_user_valid_cell('123.456 7890');
  *  # => true
  *  dosomething_user_valid_cell('1 (123) 456-7890');
  *  # => true
  *  dosomething_user_valid_cell('123-555-9942');
  *  # => false
  *  dosomething_user_valid_cell('1 902 #@@ 1234');
  *  # => false
  *  dosomething_user_valid_cell('999 999 9999');
  *  # => false
  * @endcode
  *
  * @param string $number
  *   The cell phone number that should be validated.
  *
  * @return bool
  *   True if valid, else false.
  */
function dosomething_user_valid_cell($number) {
  preg_match('#^(?:\+?1([\-\s\.]{1})?)?\(?([0-9]{3})\)?(?:[\-\s\.]{1})?([0-9]{3})(?:[\-\s\.]{1})?([0-9]{4})#', $number, $valid);
  preg_match('#([0-9]{1})\1{9,}#', preg_replace('#[^0-9]+#', '', $number), $repeat);
  return !empty($valid) && empty($repeat) && strpos($number, '555') === FALSE;
}

/**
 * Determines if a user is on the ds staff.
 *
 * @param object $user
 *   A user object.
 *
 * @return bool
 *   Returns true if user has a staff role applied, else false.
 */
function dosomething_user_is_staff($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  // Create an array of staff role ids.
  $staff_roles = array(
    user_role_load_by_name('administrator')->rid,
    user_role_load_by_name('editor')->rid,
  );

  // Does this user have a staff rid?
  if (array_intersect(array_keys($user->roles), $staff_roles)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function dosomething_user_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $account = $user;

  switch ($form_id) {
    case 'user_login_block':
    case 'user_login':
      // Add additional submission/validation/actions.
      $form['#action'] = '/user/login';
      array_unshift($form['#validate'], 'dosomething_user_login_validate');
      $form['#submit'][] = 'dosomething_user_login_submit';
      // Helper text & additional data.
      _dosomething_user_add_campaign_data($form);

    break;

    case 'user_profile_form':
    case 'user_register_form':
      // Gather helper text.
      _dosomething_user_register_helper_text($form);
      // Add campaign data, if needed.
      _dosomething_user_add_campaign_data($form);

      // Force action to post to the user registration, but not on the add people screen.
      if ($form_id == 'user_register_form' && $_SERVER['REQUEST_URI'] != '/admin/people/create') {
        $form['#action'] = '/user/register';
        $form['#submit'][] = 'dosomething_user_new_user';
      }

      // This field should always be hidden from users.
      unset($form['field_under_thirteen']);

      // Only staff can view/edit Partners term reference.
      if (!dosomething_user_is_staff()) {
        unset($form['field_partner']);
      }

      // Custom validation & submission handlers.
      $form['#validate'][] = 'dosomething_user_register_validate';
      $form['#submit'][] = 'dosomething_user_login_submit';

    break;

    case 'user_pass':
      // Get account object by email address submitted for reset
      $account = user_load_by_mail($form_state['input']['name']);
      // Send external message request
      $params = array(
        'email' => $account->mail,
        'uid' => $account->uid,
        'first_name' => dosomething_user_get_field('field_first_name', $account),
        'reset_link' => user_pass_reset_url($account),
      );
      dosomething_user_mbp_request('user_password', $params);
    break;

  }
}
/**
 * Custom new user login submission handler.
 *
 * Does actions after a new user has registered via the web.
 * Sign user up for emails/texts.
 */
function dosomething_user_new_user($form, &$form_state) {
  // Should we sign this kid up for messages?
  if (!dosomething_user_is_under_thirteen()) {
    global $user;
    $account = $user;
    // Send external message request
    $params = array(
      'email' => $account->mail,
      'uid' => $account->uid,
      'first_name' => dosomething_user_get_field('field_first_name', $account),
    );
    dosomething_user_mbp_request('user_register', $params);
    // Sign user up for mobile commons
    if (module_exists('dosomething_signup')) {
      $opt_in = variable_get('dosomething_mobilecommons_general');
      dosomething_signup_mobilecommons_opt_in($account, $opt_in);
    }
  }
}
/**
 * Checks that user is over 13.
 *
 * This is needed to make sure a new user is old enough
 * to get any external messages from us.
 *
 * @return bool
 *  Returns true if user is under 13, else false.
 */
function dosomething_user_is_under_thirteen($user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  $birthday = dosomething_user_get_birthdate(NULL, $user);
  // Get the date 13 years ago today.
  $date_cutoff = strtotime('-13 years');
  if ($date_cutoff < $birthday) {
    // Set under 13 bool to true.
    //@TODO: Cron that checks users in these values and updates users.
    $wrapper = entity_metadata_wrapper('user', $user);
    $wrapper->field_under_thirteen->set(1);
    $wrapper->save();
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Custom login submission handler.
 *
 * If there's a hidden nid, sign the user up for a campaign.
 *
 * This function will only work upon registration if account variables
 * are set to the following:
 * -- A visitor can register for the site without admin approval
 * -- Email verification is not required when user creates account.
 *
 * Otherwise, the global $user upon account creation is set with uid 0
 * and signup will fail.
 *
 * @see dosomething_user_strongarm()
 */
function dosomething_user_login_submit($form, &$form_state) {
  // If nid is not present, nothing to sign up for.  Exit.
  if (isset($form_state['input']['nid'])) {
    $nid = $form_state['input']['nid'];
    // Signup global user for node $nid.
    if (module_exists('dosomething_signup')) {
      dosomething_signup_user_signup($nid);
    }
  }
  // After all logins redirect to page user was just on.
  $form_state['redirect'] = $_SERVER['HTTP_REFERER'];
}

/**
 * Implements hook_user_insert().
 */
function dosomething_user_user_insert(&$edit, &$account, $category = NULL) {
  // Only automatically generate 'name' if not on staff.
  if (!dosomething_user_is_staff()) {
    // Replace fake user name with uid.
    db_update('users')
      ->fields(array('name' => $account->uid))
      ->condition('uid', $account->uid)
      ->execute();

    $edit['name'] = $account->uid;
    $account->name = $account->uid;
  }
}

/**
 * Add hidden campaign nid to signup/registration form.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_add_campaign_data(&$form) {
   if (module_exists('dosomething_signup')) {
    $obj = menu_get_object();
    // If we are viewing a campaign node:
    if (isset($obj->type) && $obj->type == 'campaign') {
      // Add a hidden nid field.
      $form['nid'] = array(
        '#type' => 'hidden',
        // @TODO: Encrypt me.
        '#value' => $obj->nid,
      );
      $form['#action'] = '/node/' . $obj->nid;
    }
  }
}

/**
 * Registration helper text.
 *
 * @param array $form
 *  A drupal form.
 */
function _dosomething_user_register_helper_text(&$form) {
  // Hide the username field & randomly generate the value for non-staffers.
  if (!dosomething_user_is_staff()) {
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['name']['#value'] = user_password();
  }
}

/**
 * Custom login validation.
 *
 * Allows for users to login via email or mobile number.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_login_validate($form, &$form_state) {
  // Note: Taken from logintoboggan module.
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($account = dosomething_user_get_user_by_email($form_state['values']['name'])) {
      form_set_value($form['name'], $account->name, $form_state);
    }
    elseif ($number = $form_state['values']['name']) {
      if ($account = dosomething_user_get_user_by_cell($number)) {
        form_set_value($form['name'], $account->name, $form_state);
      }
    }
  }
}
/**
 * Additional user registration validation hook.
 *
 * Clean user data on registration.
 * @see dosomething_user_form_alter()
 */
function dosomething_user_register_validate($form, &$form_state) {
  $mobile = $form_state['values']['field_mobile'][LANGUAGE_NONE][0]['value'];
  if (!empty($mobile)) {
    // Clean the user input text.
    $mobile_clean = dosomething_user_clean_cell_number($mobile);

    // Get the user's current number & see if they are updating.
    $current_number = dosomething_user_get_field('field_mobile');
    if ($mobile_clean != $current_number && ($user = dosomething_user_get_user_by_cell($mobile_clean))) {
      // This dude already has an account.
      form_set_error('dosomething_user_already_registered', t('The phone number '. $mobile . ' is already registered. Have you ' . l('forgotten your password?', 'user/password')));
    }
    else {
      // Store only the numbers.
      form_set_value($form['field_mobile'], array(LANGUAGE_NONE => array(0 => array('value' => $mobile_clean))), $form_state);
    }
  }
}

/**
 * Get a user by email address.
 *
 * @param string $email
 *   The user's email.
 *
 * @return object/bool
 *   If true return the user object, else false.
 */
function dosomething_user_get_user_by_email($email) {
  $user = user_load_by_mail($email);
  return $user ? $user : FALSE;
}

/**
 * Search for users users by their cell phone number.
 *
 * @param string $number
 *   The cell phone number for which you are searching.
 *
 * @return object/bool
 *   The user account object, or false if no user was found.
 */
function dosomething_user_get_user_by_cell($number) {
  if ($clean_number = dosomething_user_clean_cell_number($number)) {

    $query = db_select('field_data_field_mobile', 'm')
              ->fields('m', array('entity_id'))
              ->condition('field_mobile_value', $clean_number)
              ->execute();
    $uid = $query->fetchField(0);
    if (is_numeric($uid)) {
      return user_load($uid);
    }
    return FALSE;
  }

  return FALSE;
}


/**
 * Clean input phone number of all non-numeric characters.
 *
 * @param string $number
 *   The user-input mobile number.
 *
 * @return string/bool
 *   Numeric-only string of the phone number, or FALSE if not a 10-digit number.
 */
function dosomething_user_clean_cell_number($number) {
  if (dosomething_user_valid_cell($number)) {
    $trimmed_number = ltrim(preg_replace('#[^0-9]#', '', $number));

    // Make sure the number is 10 digits long.
    if (strlen($trimmed_number) == 10) {
      return $trimmed_number;
    }
    return FALSE;
  }
  return FALSE;
}
/**
 * A request to send a message via the Message Broker library:
 * https://github.com/DoSomething/messagebroker-phplib
 *
 * @param string $origin
 *  Where the message request came from.
 * @param array $params
 *  Optional keyed array of data to send externally.
 *  Common values:
 *    - email
 *    - uid
 *
 *  Values needed based on the $origin value:
 *    - first_name
 *    - reset_link
 *    - event_id
 *    - campaign_title
 *    - call_to_action
 *    - step_one
 *    - step_two
 *    - step_three
 *    - impact_verb
 *    - impact_number
 *    - impact_noun
 */
function dosomething_user_mbp_request($origin, $params = NULL) {
  if (!module_exists('message_broker_producer')) return FALSE;

  $payload = array(
    'activity' => $origin,
    'email' => $params['email'],
    'uid' => $params['uid'],
  );
  switch ($origin) {
    case 'user_register':
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
      );
      break;
    case 'user_password':
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'RESET_LINK' => $params['reset_link'],
      );
      break;
    case 'campaign_signup':
      $payload['event_id'] = $params['event_id'];
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'CAMPAIGN_TITLE' => 'campaign_title',
        'CALL_TO_ACTION' => $params['call_to_action'],
        'STEP_ONE' => $params['step_one'],
        'STEP_TWO' => $params['step_two'],
        'STEP_THREE' => $params['step_three'],
      );
      break;
    case 'campaign_reportback':
      $payload['event_id'] = $params['event_id'];
      $payload['merge_vars'] = array(
        'FNAME' => $params['first_name'],
        'IMPACT_VERB' => $params['impact_verb'],
        'IMPACT_NUMBER' => $params['impact_number'],
        'IMPACT_NOUN' => $params['impact_noun'],
      );
      break;
  }

  try {
    return message_broker_producer_request('produceTransactional', $payload);
  }
  catch (Exception $e){
    watchdog('dosomething_user', $e, array(), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Returns value for given field on given user.
 *
 * @param string $field_name
 *   The machine name of the field that stores value to return.
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 *
 * @return mixed
 *   Returns NULL if not set, otherwise whatever type of data the field stores.
 */
function dosomething_user_get_field($field_name, $account = NULL) {
  if ($account == NULL) {
    global $user;
    $account = $user;
  }
  $wrapper = entity_metadata_wrapper('user', $account);
  return $wrapper->{$field_name}->value();
}

/**
 * Returns given user's mobile number.
 *
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 *
 * @return mixed
 *   Returns NULL if not set, otherwise string.
 */
function dosomething_user_get_mobile($account = NULL) {
  return dosomething_user_get_field('field_mobile', $account);
}

/**
 * Returns given user's birthdate.
 *
 * @param string $format
 *   Optional- format to return. http://www.php.net/manual/en/function.date.php.
 *   If NULL, the raw timestamp is returned.
 * @param object $account
 *   The account to return value for. If NULL, uses global $user.
 *
 * @return string
 *   Returns the date in specified $format.
 */
function dosomething_user_get_birthdate($format = NULL, $account = NULL) {
  $time = dosomething_user_get_field('field_birthdate', $account);
  // If no format specified:
  if ($format == NULL) {
    // Return raw timestamp.
    return $time;
  }
  // Return date formatted per $format string.
  return format_date($time, 'custom', $format);
}
