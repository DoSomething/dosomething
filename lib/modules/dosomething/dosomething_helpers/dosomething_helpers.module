<?php
include_once 'dosomething_helpers.features.inc';
/**
 * @file
 * Code for the Dosomething helpers feature.
 */

include_once('dosomething_helpers.drush.inc');
include_once('dosomething_helpers.theme.inc');
include_once('dosomething_helpers.strongarm.inc');
include_once('dosomething_helpers.variable.inc');
include_once('dosomething_helpers.share.inc');

/**
 * Utility function to determine if an array is associative.
 *
 * @param array $data
 * @return bool
 */
function dosomething_helpers_array_is_associative(array $data) {
  return count(array_filter(array_keys($data), 'is_string')) > 0;
}

/**
 * Utility function to check if a variable is set, and return it
 * if it is, otherwise return a default value. If the variable is
 * an array or object, then a $key is passed to select the specific
 * variable that may or may not exist.
 *
 * @param string|array|object $var  Variable to check.
 * @param string $key  If $var is an array or object, key to check.
 * @param null $default  Set a default value to assign if $var not set.
 *
 * @return array|object|string|integer|null
 *
 * @deprecated use data_get() helper function from the Collect composer package /vendor/tightenco/collect
 */
function dosomething_helpers_isset($var, $key = NULL, $default = NULL) {
  if (is_array($var) && $key) {
    return isset($var[$key]) ? $var[$key] : $default;
  }

  if (is_object($var) && $key) {
    return isset($var->$key) ? $var->$key : $default;
  }

  return isset($var) ? $var : $default;
}

/**
 * Implements hook_menu().
 */
function dosomething_helpers_menu() {
  $items['admin/config/dosomething'] = array(
    'title' => 'DoSomething config',
    'description' => 'Configuration for DoSomething custom functionality.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // A redirect page for facebook shares that require it.
  $items['ds-share-complete'] = array(
    'title' => 'Thank you for sharing',
    'page callback' => 'dosomething_helpers_share_redirect',
    'access arguments' => array('access content'),
    'file' => 'dosomething_helpers.share.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Utility function to convert dates, defaults to ISO-8601 datetime.
 */
function dosomething_helpers_convert_date($date, $format = 'ISO-8601') {
  $timezone = new DateTimeZone('UTC');
  $datetime = new DateTime($date, $timezone);

  if ($format === 'ISO-8601') {
    return $datetime->format(DateTime::ISO8601);
  }
}

/**
 * Convert set of nested array $filters into one dimensional $parameters array.
 * Needed for ApiCache Class ID generation.
 *
 * @param  array  $filters
 * @return null|array
 */
function dosomething_helpers_convert_filters_to_url_parameters(array $filters = []) {
  if (!$filters) {
    return NULL;
  }

  $parameters = [];

  foreach ($filters as $key => $value) {
    if (!is_int($value) && !$value) {
      continue;
    }

    if (!is_array($value)) {
      $value = [$value];
    }

    switch($key) {
      case 'nid':
            $parameters['campaigns'] = implode(',', $value);
            break;

      case 'exclude':
            $parameters[$key] = implode(',', $value);
            break;

      case 'load_user':
      case 'random':
            $parameters[$key] = 'true';
            break;

      default:
            $parameters[$key] = implode(',', $value);
    }
  }

  return $parameters;
}


/**
 * Utility function to convert string value of true|false into actual boolean value.
 *
 * @param  $string
 * @return mixed
 */
function dosomething_helpers_convert_string_to_boolean($string) {
  return filter_var($string, FILTER_VALIDATE_BOOLEAN);
}

/**
 * Utility function to delete automated test data.
 */
function dosomething_helpers_delete_test_nodes() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('created', -1);

  $result = $query->execute();
  if (isset($result['node'])) {
    $test_nids = array_keys($result['node']);
    node_delete_multiple($test_nids);

    return $test_nids;
  } else {
    return null;
  }
}

/**
 * Utility function to extract content data from fields, while accounting
 * for language selection.
 *
 * @param array $field Nested array of field data.
 * @param string $language Language selection, defaults to Drupal constant for "undefined".
 *
 * @return mixed|null
 */
function dosomething_helpers_extract_field_data($field, $language = LANGUAGE_NONE) {
  if (!isset($field) || empty($field)) {
    return NULL;
  }

  $data = dosomething_helpers_get_field_data_by_language($field, $language);

  $values = [];

  foreach ($data as $item => $content) {
    $keys = array_keys($content);

    if (in_array('date_type', $keys)) {
      // Date values, so need to extract using custom method.
      $values[] = dosomething_helpers_extract_field_dates($content);
    }
    elseif (in_array('country', $keys)) {
      //TODO: Build function to get all address data, not just country.
      $values[] = $content['country'];
    }
    elseif (in_array('type', $keys)) {
      if ($content['type'] === 'image' || $content['type'] === 'document') {
        $values[] = dosomething_helpers_extract_field_file_attachment($content);
      } else {
        // Default to first item; typically an id value.
        $values[] = $content[$keys[0]];
      }
    }
    elseif ($keys[0] === 'value') {
      // Text value, so need to extract using custom method.
      $values[] = dosomething_helpers_extract_field_text($content);
    }
    else {
      // ID value.
      $values[] = $content[$keys[0]];
    }
  }

  if (count($values) > 1) {
    return $values;
  }

  return $values[0];
}


function dosomething_helpers_extract_field_dates($data) {
  $values = [];

  if (isset($data['value'])) {
    $values['start'] = $data['value'];
  }

  if (isset($data['value2'])) {
    $values['end'] = $data['value2'];
  }

  return $values;
}


function dosomething_helpers_extract_field_file_attachment($data) {
  $values = [];

  $values['id'] = isset($data['fid']) ? $data['fid'] : NULL;
  $values['type'] = isset($data['type']) ? $data['type'] : NULL;
  $values['uri'] = isset($data['uri']) ? $data['uri'] : NULL;
  $values['file_name'] = isset($data['filename']) ? $data['filename'] : NULL;
  $values['file_mime'] = isset($data['filemime']) ? $data['filemime'] : NULL;
  $values['file_size'] = isset($data['filesize']) ? $data['filesize'] : NULL;
  $values['title'] = isset($data['title']) && !empty($data['title']) ? $data['title'] : NULL;
  $values['description'] = isset($data['description']) && !empty($data['description']) ? $data['description'] : NULL;
  $values['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : NULL;

  return $values;
}

/**
 * Utility function to extract field text content; both the raw
 * and formatted text.
 *
 * @param array $data Nested array of field text data.
 *
 * @return array
 */
function dosomething_helpers_extract_field_text($data) {

  if (isset($data['safe_value'])) {
    if (is_null($data['format'])) {
      return $data['value'];
    }
    else {
      return array(
        'raw' => $data['value'],
        'formatted' => $data['safe_value'],
      );
    }
  }

  return $data['value'];
}


/**
 * Utility function to extract ID from object or array with other items.
 *
 * @param object|array $data
 * @param string $property
 * @return string
 */
function dosomething_helpers_extract_id($data, $property = 'nid') {
  $data = (object) $data;

  return $data->$property;
}


/**
 * Format a string of comma separated data items into an array, or
 * if a single item, return it without formatting.
 *
 * @param string $data Single or multiple comma separated data items.
 * @return string|array
 */
function dosomething_helpers_format_data($data) {
  $array = explode(',', $data);

  if (count($array) > 1) {
    return $array;
  }

  return $data;
}

/**
 * Utility function to extract data translated in the specified language from an
 * array of available translations.
 *
 * @param $field
 * @param string $language Language selection, defaults to Drupal constant for "undefined".
 * @return array|null
 */
function dosomething_helpers_get_field_data_by_language($field, $language = LANGUAGE_NONE) {
  if (!$field) {
    return NULL;
  }

  // ---
  // Temporary fix for translatable fields.
  // If no specific language requested, attempt to return English value first.
  //
  // In future the API will be extended with functionally that controls
  // output language with a URL parameter.
  if ($language === LANGUAGE_NONE) {
    if (!empty($field['en'])) {
      $language = 'en';
    }
  }
  // ---

  if (!array_key_exists($language, $field)) {
    return NULL;
  }

  return $field[$language];
}

/**
 * Wrapper function for Drupal's ip_address function.
 *
 * Because varnish only likes to expose its own IP, and
 * apache and nginx will give different results as well.
 *
 * @return string
 *   The IP address of the client machine.
 */
function dosomething_helpers_ip_address() {
  return isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : ip_address();
}

/**
 * Implements hook_form_alter().
 */
function dosomething_helpers_form_alter(&$form, &$form_state, $form_id) {
  // If we are on a node add/edit form.
  if (array_key_exists('#node_edit_form', $form)) {
    // Add css to alter all node forms.
    drupal_add_css(drupal_get_path('module', 'dosomething_helpers') . '/dosomething_helpers_nodeform.css');
    drupal_add_js(drupal_get_path('module', 'dosomething_helpers') . '/dosomething_helpers_nodeform.js');
  }
}

/**
 * Implements hook_menu_alter().
 */
function dosomething_helpers_menu_alter(&$items) {
  // This removes the default '/node' view on drupal.
  unset($items['node']);
}

/**
 * Returns array of values of a field collection field.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper object.
 * @param string $field_name
 *   The field_collection field to return values from.
 *
 * @return mixed
 *   Multi-dimensional array of field collection values or NULL if empty.
 *
 */
function dosomething_helpers_get_field_collection_values($wrapper, $field_name) {
  $values = array();

  // Loop through the given field.
  foreach ($wrapper->{$field_name}->getIterator() as $delta => $field) {
    // Copy is returned as an array.
    $copy = $field->field_compound_text_copy->value();
    $values[] = array(
      'header' => $field->field_compound_text_header->value(),
      'copy' => $copy['safe_value'],
    );
  }
  if (!empty($values)) {
    return $values;
  }
  return NULL;
}

/*
 * Returns array of nid and titles of all nodes with given $type.
 *
 * @return array
 *  Array of nids and titles of all campaign group nodes.
 */
function dosomething_helpers_get_node_vars($type) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('type', $type);
  $results = $query->execute();

  foreach($results as $key => $result) {
    $vars[$key]['nid'] = $result->nid;
    $vars[$key]['title'] = $result->title;
  }
  if ($vars) {
    return $vars;
  }
  return NULL;
}


/**
* Truncates text.
*
* Cuts a string to the length of $length and replaces the last characters
* with the ending if the text is longer than length.
*
* @param string  $text String to truncate.
* @param integer $length Length of returned string, including ellipsis.
* @param string  $ending Ending to be appended to the trimmed string.
* @param boolean $exact If false, $text will not be cut mid-word
* @param boolean $considerHtml If true, HTML tags would be handled correctly
* @return string Trimmed string.
*/

function dosomething_helpers_text_truncate($text, $length = 100, $ending = '...', $exact = true, $considerHtml = false) {
    if ($considerHtml) {
        // if the plain text is shorter than the maximum length, return the whole text
        if (strlen(preg_replace('/<.*?>/', '', $text)) <= $length) {
            return $text;
        }

        // splits all html-tags to scanable lines
        preg_match_all('/(<.+?>)?([^<>]*)/s', $text, $lines, PREG_SET_ORDER);

        $total_length = strlen($ending);
        $open_tags = array();
        $truncate = '';

        foreach ($lines as $line_matchings) {
            // if there is any html-tag in this line, handle it and add it (uncounted) to the output
            if (!empty($line_matchings[1])) {
                // if it's an "empty element" with or without xhtml-conform closing slash (f.e. <br/>)
                if (preg_match('/^<(\s*.+?\/\s*|\s*(img|br|input|hr|area|base|basefont|col|frame|isindex|link|meta|param)(\s.+?)?)>$/is', $line_matchings[1])) {
                    // do nothing
                // if tag is a closing tag (f.e. </b>)
                } else if (preg_match('/^<\s*\/([^\s]+?)\s*>$/s', $line_matchings[1], $tag_matchings)) {
                    // delete tag from $open_tags list
                    $pos = array_search($tag_matchings[1], $open_tags);
                    if ($pos !== false) {
                        unset($open_tags[$pos]);
                    }
                // if tag is an opening tag (f.e. <b>)
                } else if (preg_match('/^<\s*([^\s>!]+).*?>$/s', $line_matchings[1], $tag_matchings)) {
                    // add tag to the beginning of $open_tags list
                    array_unshift($open_tags, strtolower($tag_matchings[1]));
                }
                // add html-tag to $truncate'd text
                $truncate .= $line_matchings[1];
            }

            // calculate the length of the plain text part of the line; handle entities as one character
            $content_length = strlen(preg_replace('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', ' ', $line_matchings[2]));
            if ($total_length+$content_length> $length) {
                // the number of characters which are left
                $left = $length - $total_length;
                $entities_length = 0;
                // search for html entities
                if (preg_match_all('/&[0-9a-z]{2,8};|&#[0-9]{1,7};|&#x[0-9a-f]{1,6};/i', $line_matchings[2], $entities, PREG_OFFSET_CAPTURE)) {
                    // calculate the real length of all entities in the legal range
                    foreach ($entities[0] as $entity) {
                        if ($entity[1]+1-$entities_length <= $left) {
                            $left--;
                            $entities_length += strlen($entity[0]);
                        } else {
                            // no more characters left
                            break;
                        }
                    }
                }
                $truncate .= substr($line_matchings[2], 0, $left+$entities_length);
                // maximum lenght is reached, so get off the loop
                break;
            } else {
                $truncate .= $line_matchings[2];
                $total_length += $content_length;
            }

            // if the maximum length is reached, get off the loop
            if($total_length>= $length) {
                break;
            }
        }
    } else {
        if (strlen($text) <= $length) {
            return $text;
        } else {
            $truncate = substr($text, 0, $length - strlen($ending));
        }
    }

    // if the words shouldn't be cut in the middle...
    if (!$exact) {
        // ...search the last occurance of a space...
        $spacepos = strrpos($truncate, ' ');
        if (isset($spacepos)) {
            // ...and cut the text in this position
            $truncate = substr($truncate, 0, $spacepos);
        }
    }

    // add the defined ending to the text
    $truncate .= $ending;

    if($considerHtml) {
        // close all unclosed html-tags
        foreach ($open_tags as $tag) {
            $truncate .= '</' . $tag . '>';
        }
    }

    return $truncate;

}

/**
 * Rounds a decimal $value down always, and to given number of $decimals.
 *
 * e.g. dosomething_helpers_floor_decimal(2.999999, 1) = 2.9
 * e.g. dosomething_helpers_floor_decimal(2.989999, 2) = 2.98
 *
 * Many thanks to our buddy seppili_ at gmx dot de:
 * @see http://php.net/manual/en/function.floor.php#96568
 */
function dosomething_helpers_floor_decimal($value, $decimals = 1) {
  return floor($value * pow(10, $decimals)) / pow(10, $decimals);
}



/**
 * Adds custom GA event to page
 *
 * @param String category The category of the event
 * @param String action The action being performed
 * @param (optional) String label The event label
 * @param (optional) String value The value to be sent
 */
function dosomething_helpers_add_analytics_event($category, $action, $label = NULL, $value = NULL) {
  $event_string = '"' . $category . '"' . ', ' . '"' . $action . '"';
  if ($label) {
    $event_string = $event_string . ', ' . $label;
  }
  if ($value) {
    $event_string = $event_string  . ',' . $value;
  }
  $google_analytics_js = 'if(typeof(ga) !== "undefined" && ga !== null) { ga("send", "event", ' . $event_string . '); }';
  drupal_add_js($google_analytics_js, 'inline');
}

/**
 * Creates a simple query encoded string with basic or customized UTM params
 * that can be added to any url.
 * @param  $nid
 * @param  array $options - custom utm values to use.
 */
function dosomething_helpers_utm_parameters($nid, $options = NULL) {
  // Use the node id for 'utm_campaign', if it is given, otherwise use the custom value in $options
  $utm_campaign = ($nid) ? $nid : ($options['utm_campaign']) ? $options['utm_campaign'] : NULL;

  $utm_params = array(
    'utm_source' => (isset($options['utm_source'])) ? $options['utm_source'] : 'dosomething',
    'utm_medium' => (isset($options['utm_medium'])) ? $options['utm_medium'] : 'site',
    'utm_campaign' => $utm_campaign,
  );

  return '?' . http_build_query($utm_params, '', '&');
}

/**
 * Returns a property wrapper for the given node.
 *
 * @param $node
 *   The node to wrap.
 * @param  boolean
 *   Return langiage-neutral wrapper.
 *
 * @return EntityMetadataWrapper
 *   Dependend on the passed data the right wrapper is returned.
 */
function dosomething_helpers_node_metadata_wrapper($node, $ignore_language = FALSE) {
  return _dosomething_helpers_metadata_wrapper('node', $node, $ignore_language);
}

/**
 * Returns a property wrapper for the given term.
 *
 * @param $term
 *   The term to wrap.
 * @param  boolean
 *   Return langiage-neutral wrapper.
 *
 * @return EntityMetadataWrapper
 *   Dependend on the passed data the right wrapper is returned.
 */
function dosomething_helpers_term_metadata_wrapper($term, $ignore_language = FALSE) {
  return _dosomething_helpers_metadata_wrapper('taxonomy_term', $term, $ignore_language);
}

/**
 * Returns a property wrapper for the given term.
 *
 * @param $type
 *   The type of the passed data.
 * @param $data
 *   The term to wrap.
 * @param  boolean
 *   Return langiage-neutral wrapper.
 *
 * @return EntityMetadataWrapper
 *   Dependend on the passed data the right wrapper is returned.
 */
function _dosomething_helpers_metadata_wrapper($type, $entity, $ignore_language) {
  $wrapper = entity_metadata_wrapper($type, $entity);
  if (!$ignore_language) {
    $wrapper->language(dosomething_helpers_get_current_language_code());
  }
  return $wrapper;
}

/**
 * Returns current language code.
 *
 * @return string
 *   ISO-code of current language
 */
function dosomething_helpers_get_current_language_code() {
  global $language;
  return $language->language;
}

/**
 * Returns current language_content code.
 *
 * @return string
 *   ISO-code of current language
 */
function dosomething_helpers_get_current_language_content_code() {
  global $language_content;
  $result = $language_content->language;

  // Temporary fix for #5692.
  $override = variable_get('dosomething_campaign_group_override_language');
  // Only when turned on and language is GlobalEnglish.
  if ($override && $result === 'en-global') {
    // Override campaign groups.
    if (arg(0) === 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node && $node->type === 'campaign_group') {
        $result = 'en';
      }
    }

    // And taxonomy terms.
    // Override campaign groups.
    if (arg(0) === 'taxonomy' && arg(1) === 'term' && is_numeric(arg(2))) {
      $term = taxonomy_term_load(arg(2));
      if ($term) {
        $result = 'en';
      }
    }
  }

  return $result;
}

/**
 * Get the current, logged in user.
 *
 * @param  null|object $user
 * @return null|array
 */
function dosomething_helpers_get_current_user($user = NULL) {
  if (!$user) {
    global $user;
  }

  if (!$user->uid) {
    return NULL;
  }

  return dosomething_helpers_get_user_info($user->uid);
}

/**
 * Get activity for the current, logged in user.
 *
 * @param  null|object $user
 * @return null|array
 */
function dosomething_helpers_get_current_user_activity($user = NULL) {
  if (!$user) {
    global $user;
  }

  if (!$user->uid) {
    return NULL;
  }

  return [
    // @TODO: add other user activity info to this array.
    'signups' => dosomething_signup_get_signup_nids_by_uid($user->uid),
  ];
}

/**
 * Get the user information for a specified user from Northstar.
 *
 * @param  string $drupal_id
 * @return null|array
 */
function dosomething_helpers_get_user_info($drupal_id) {
  if (! module_exists('dosomething_northstar')) {
    return NULL;
  }

  $northstar_response = dosomething_northstar_get_northstar_user($drupal_id);
  $northstar_response = json_decode($northstar_response);

  if ($northstar_response && isset($northstar_response->error)) {
    return NULL;
  }

  $northstar_user = $northstar_response->data;

  return [
    'id' => data_get($northstar_user, 'id'),
    'email' => data_get($northstar_user, 'email'),
    'first_name' => data_get($northstar_user, 'first_name'),
    'last_name' => data_get($northstar_user, 'last_name'),
    'last_initial' => data_get($northstar_user, 'last_initial'),
    'photo' => data_get($northstar_user, 'photo'),
    'birthdate' => data_get($northstar_user, 'birthdate'),
    'addr_street1' => data_get($northstar_user, 'addr_street1'),
    'addr_street2' => data_get($northstar_user, 'addr_street2'),
    'addr_city' => data_get($northstar_user, 'addr_city'),
    'addr_state' => data_get($northstar_user, 'addr_state'),
    'addr_zip' => data_get($northstar_user, 'addr_zip'),
    'country' => data_get($northstar_user, 'country'),
    'drupal_id' => $drupal_id,
  ];
}

/**
 * Get the filesystem path relative to the application root.
 *
 * @param $path
 *  (optional) subdirectory to get the path of.
 *
 * @return string
 *  Filesystem path
 */
function dosomething_helpers_application_path($path = '') {
  return realpath(DRUPAL_ROOT . '/../' . $path);
}

/**
 * Implements hook_url_outbound_alter().
 */
 function dosomething_user_url_outbound_alter(&$path, &$options, $original_path) {
  // Remove destination?=admin/content from node edit links
  if (preg_match('|^node/([0-9]*)/edit(/.*)?|', $path, $matches)) {
    if (isset($options['query']['destination'])) {
      unset($options['query']['destination']);
    }
  }
}

/**
 * Given an associative array, unset the items with the specified keys.
 *
 * @param  array  $array
 * @param  array  $keys
 * @return array|null
 */
function dosomething_helpers_unset_array_keys(array $array = [], array $keys = []) {
  if (!$array) {
    return NULL;
  }

  foreach ($keys as $key) {
    if (array_key_exists($key, $array)) {
      unset($array[$key]);
    }
  }

  return $array;
}

/**
* Checks to see if items are numeric. Unsets anything non-numeric and returns array of numbers (or empty array).
* @param string|array
* @return array
*/
function dosomething_helpers_unset_non_numeric_array_values($items) {
  if (is_string($items)) {
    $items = [$items];
  }

  foreach ($items as $key => $item) {
    if (! is_numeric($item)) {
      unset($items[$key]);
    }
  }

  return $items;
}

/**
 * Determines active or closed status based on start and end dates of a campaign run.
 *
 * @param string $start_date
 * @param string $end_date
 *
 * @return string 'active' or 'closed' based on timing logic.
 */
function dosomething_helpers_get_campaign_status($start_date, $end_date) {
  // Create DateTime objects in EST.
  $tz = new DateTimeZone('America/New_York');
  $now = new DateTime('now', $tz);
  $start_date = new DateTime($start_date, $tz);

  if (!is_null($end_date)) {
    $end_date = new DateTime($end_date, $tz);

    // For runs that have the same start and end date,
    // check if they should still be active.
    // This code supports campaign runs that were created before we
    // added logic to set end dates to NULL if the campaign had no end date.
    if (($start_date == $end_date) && ($now >= $start_date)) {
      return 'active';
    }
    else {
      $end_date = $end_date->setTime(23,59,59);
    }
  }

  if ($now >= $start_date) {
    if (is_null($end_date) || $now <= $end_date) {
      return 'active';
    }
    else {
      return 'closed';
    }
  }
  else {
    return 'closed';
  }
}

/**
 * Gets the current run for a given campaign nid and user.
 *
 * @param  int     $nid
 * @param  object  $user
 * @param  object  $campaign
 * @return bool|mixed  Returns the campaigns node in the correct language or false.
 * @throws Exception
*/
function dosomething_helpers_get_current_campaign_run_for_user($nid, $user = NULL, $campaign = NULL) {
  if (!isset($campaign)) {
    $campaign = Campaign::get($nid);
  }

  if (!isset($user)) {
    global $user;
  }

  $node = $campaign->getNodeData();

  // First check if we have a run in the user lang
  $user_language = dosomething_global_get_language($user, $node);
  $run = dosomething_helpers_isset($campaign->campaign_runs['current'], $user_language);

  // If not try the Campaign's source language
  if (!isset($run)) {
    $campaign_language = $campaign->language['language_code'];
    $run = dosomething_helpers_isset($campaign->campaign_runs['current'], $campaign_language);

    // Return NULL if the campaign doesn't have a run nid
    if (!isset($run)) {
      return NULL;
    }
  }

  // Load the run and return it.
  // For some reason this also loads the proper translation, for both anonymous users and authed. I can't explain it.
  // @TODO: may want to investigate how it loads the proper translation...
  return node_load($run['id']);
}

function dosomething_helpers_get_data_uri_from_image($image) {
  $imagePath = drupal_realpath($image->source);

  // Read image path, convert to base64 encoding
  $imageData = base64_encode(file_get_contents($imagePath));

  // Return the formated data uri: data:{mime};base64,{data};
  return 'data: ' . mime_content_type($imagePath) . ';base64,' . $imageData;
}
