<?php
/**
 * @file
 * Code for the DoSomething Static Content feature.
 */

include_once 'dosomething_static_content.features.inc';

/**
 * Implements hook_preprocess_node().
 */
function dosomething_static_content_preprocess_node(&$vars) {
  if ($vars['type'] == 'static_content') {
    $content = $vars['content'];
    $template_vars = array(
      'text' => array(
        'subtitle',
        'intro_title',
        'intro',
        'additional_text_title',
        'additional_text',
        'call_to_action',
      ),
      'image' => array(
        'hero_image',
        'intro_image',
      ),
      'link' => array(
        'cta_link'
      ),
    );

    foreach ($template_vars as $key => $labels) {
      foreach ($labels as $label) {
        $field = "field_{$label}";
          if (isset($content[$field])) {
          switch ($key) {
            case 'text':
              $vars[$label] = $content[$field][0]['#markup'];
              break;
            case 'image':
              if ($label == 'hero_image') {
                $size = '800x300';
              }
              elseif ($label == 'intro_image') {
                $size = '550x300';
              }
              $vars[$label] = dosomething_image_get_themed_image($vars[$field][0]['entity']->nid, 'landscape', $size);
            break;
            case 'link':
              $vars[$label] = l($content[$field][0]['#element']['title'], $content[$field][0]['#element']['url'], array('attributes' => array('class' => 'button')));
            break;
            default:
              break;
          }
        }
      }
    }

    $node = entity_metadata_wrapper('node', $vars['node']);
    if (!empty($vars['node']->field_video)) {
      if ($node->field_video->value()->field_video_id) {
        $vars['intro_video'] = theme('dosomething_video_embed', array('field' => $node->field_video->value()));
      }
    }

    // Preprocess gallery variables.
    dosomething_static_content_preprocess_galleries($vars);

    // If values present in the field_partners collection:
    if (!empty($vars['field_partners'])) {
      // Sets partners, sponsors, and partner_info arrays if present.
      dosomething_helpers_preprocess_partners_vars($vars);
    }
  }
}

/**
 * Preprocess variables for the field_gallery field collection.
 *
 * @param array $vars
 *   Variable array as passed from a hook_preprocess_node.
 *
 * @see dosomething_static_content_preprocess_node().
 */
function dosomething_static_content_preprocess_galleries(&$vars) {
  $content = $vars['content'];
  $gallery_count = count($content['field_gallery']['#items']);

  $vars['galleries'] = [];

  // Loop through the galleries.
  for ($i = 0; $i < $gallery_count; $i++) {

    // Set Gallery style default variables:
    $gallery_style = 'triad';
    $classes = [];

    // Defaults to use the Image node square field.
    $image_ratio = 'square';
    $image_style = '400x400';

    $vars['galleries'][$i] = [];
    $collection_item = reset($content['field_gallery'][$i]['entity']['field_collection_item']);

    // Check for a Gallery Style field value:
    $item_style = [];
    if (isset($collection_item['field_gallery_style'][0])) {
      // Store the Gallery Style key.
      $chosen_style = $collection_item['field_gallery_style']['#items'][0]['value'];

      // If a key exists and it's not the default:
      if ($chosen_style && $chosen_style == '2col') {
        $gallery_style = 'duo';
        $image_ratio = 'thumb';
        $image_style = '100x100';
        $item_style[] = '-left';
      }
      else if ($chosen_style == '3col_short') {
        $image_style = 'wmax-300-hmax-75';
        $item_style[] = '-aligned';
      }
    }

    $title = $collection_item['field_gallery_title'][0]['#markup'];
    $vars['galleries'][$i]['layout'] = $gallery_style;
    $vars['galleries'][$i]['classes'] = $classes;

    // Prepare & theme the gallery items.
    $items = [];
    $collection_item = $collection_item['field_gallery_item'];
    $gallery_item_count = count($collection_item['#items']);
    for ($a = 0; $a < $gallery_item_count; $a++) {
      $field_item = reset($collection_item[$a]['entity']['field_collection_item']);

      $link_field = $field_item['field_image_title'][0]['#element'];
      $gallery_item = [
        'title' => $link_field['url'] ? l(t($link_field['title']), $link_field['url'], ['target' => '_blank']) : $link_field['title'],
        'description' => $field_item['field_image_description'][0]['#markup'],
        'image' => dosomething_image_get_themed_image($field_item['field_gallery_image']['#items'][0]['target_id'], $image_ratio, $image_style),
        'url' => $link_field['url'],
      ];

      $items[$a] = paraneue_dosomething_get_gallery_item($gallery_item, 'figure', TRUE, $item_style);
    }

    $vars['galleries'][$i]['markup'] = paraneue_dosomething_get_gallery($items, $gallery_style, $classes, FALSE, $title);
  }
}

/**
 * Implements hook_field_collection_is_empty_alter().
 */
function dosomething_static_content_field_collection_is_empty_alter(&$is_empty, $item) {
  // If this is the field_video field_collection:
  if ($item->field_name == 'field_video') {
    // If a Video ID exists.
    if (isset($item->field_video_id[LANGUAGE_NONE][0]['value'])) {
      // If no value exists, consider this field collection empty.
      $is_empty = empty($item->field_video_id[LANGUAGE_NONE][0]['value']);
      return;
    }
    // Else assume this is an empty field collection.
    $is_empty = TRUE;
  }
}

/**
* Implements hook_entity_info_alter().
* Adds a search index view mode for the gallery field collection
*/
function dosomething_search_entity_info_alter(&$entity_info) {
  $entity_info['field_collection_item']['view modes']['dosomething_search_index'] = array(
    'label' => t('DoSomething Search Index'),
    'custom settings' => TRUE,
  );
}
