<?php
/**
 * @file
 * Code for the dosomething_campaign feature.
 */

include_once 'dosomething_campaign.features.inc';

/**
 * Implements hook_form_alter().
 */
function dosomething_campaign_form_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  unset($form['field_active_hours'][LANGUAGE_NONE]['#options']['_none']);
  $form['title']['#description'] = t('Title - i.e. "Protect your Pills", "Birthday Mail", or "Teens for Jeans" <br/><strong> Limit: 20 characters. </strong>');
}

/**
 * Implements hook_menu().
 */
function dosomething_campaign_menu() {
  $items = array();
  // Internal pitch page for staff.
  $items['node/%node/pitch'] = array(
    'title' => 'Pitch',
    'page callback' => '_dosomething_campaign_pitch_view_mode',
    'page arguments' => array(1),
    'access callback' => '_dosomething_campaign_pitch_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  // User reportback confirmation page.
  $items['node/%node/confirmation'] = array(
    'title' => 'You Did It!',
    'page callback' => 'dosomething_campaign_reportback_confirmation_page',
    'page arguments' => array(1),
    'access callback' => 'dosomething_campaign_reportback_confirmation_page_access',
    'access arguments' => array(1),
  );
  return $items;
}

/*
 * Determines whether a user has access to the pitch page.
 */
function _dosomething_campaign_pitch_page_access($node) {
  // Are we on a campaign node?
  if ($node->type == 'campaign') {
    // Is the user a DS admin or editor?
    if (dosomething_user_is_staff()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Campaign pitch page callback from hook_menu().
 */
function _dosomething_campaign_pitch_view_mode($node) {
  $node_rendered = node_view($node, 'pitch');
  return $node_rendered;
}

/**
 * Determines whether a user has access to the user reportback confirmation page.
 *
 * @param object $node
 *   The loaded campaign node.
 *
 * @return boolean
 */
function dosomething_campaign_reportback_confirmation_page_access($node) {
  // Are we on a campaign node?
  if ($node->type != 'campaign') {
    return FALSE;
  }
  // Allow staff access to confirmation page regardless of reportback status.
  if (module_exists('dosomething_user') && dosomething_user_is_staff()) {
    return TRUE;
  }
  // Else only grant if the user has reported back on this campaign.
  elseif (module_exists('dosomething_reportback') && dosomething_reportback_exists($node->nid)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for the user reportback confirmation page.
 *
 * @param object $node
 *   The loaded campaign node.
 *
 * @return string
 *   Rendered HTML.
 */
function dosomething_campaign_reportback_confirmation_page($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Link to "more campaigns".
  $more_campaigns_link = l('Find more campaigns', 'campaigns', array(
    'attributes' => array('class' =>
      array('btn', 'large')
    ))
  );
  // Link back to current node.
  $campaign_link_title = t('Back to @title', array('@title' => $node->title));
  $back_to_campaign_link = l($campaign_link_title, 'node/' . $node->nid, array(
    'attributes' => array('class' =>
      array('btn', 'secondary', 'small')
    ))
  );
  // Store current node's primary cause tid.
  $tid = $wrapper->field_primary_cause->getIdentifier();
  // Get recommended campaign nids for term $tid and current user.
  $rec_nids = dosomething_campaign_get_recommended_campaign_nids($tid);
  // Initalize array to store reccomended campaign vars.
  $rec_vars = array();
  // Loop through rec_nids to load relevant variables.
  foreach ($rec_nids as $nid) {
    $rec_vars[] = dosomething_campaign_get_recommended_campaign_vars($nid);
  }
  return theme('reportback_confirmation', array(
    'copy' => $wrapper->field_reportback_confirm_msg->value(),
    'more_campaigns_link' => $more_campaigns_link,
    'back_to_campaign_link' => $back_to_campaign_link,
    'recommended' => $rec_vars,
    )
  );
}

/**
 * Returns an array of variables for a given recommended campaign $nid.
 *
 * @param int $nid
 *   The node $nid to return variables for.
 *
 * @return array
 *   An array of variables.
 */
function dosomething_campaign_get_recommended_campaign_vars($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  $path = 'node/' . $nid;
  $image_link = NULL;
  $image_nid = $wrapper->field_image_campaign_cover->getIdentifier();
  if ($image_nid) {
    $image = dosomething_image_get_themed_image_url($image_nid, 'landscape', '740x480');
  }
  return array(
    'nid' => $wrapper->getIdentifier(),
    'title' => l($wrapper->label(), $path),
    'call_to_action' => $wrapper->field_call_to_action->value(),
    'image' => $image,
  );
}

/**
 * Implements hook_theme().
 */
function dosomething_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'reportback_confirmation' => array(
      'template' => 'reportback-confirmation',
      'path' => drupal_get_path('module', 'dosomething_campaign') . '/theme',
      'variables' => array(
        'copy' => NULL,
        'more_campaigns_link' => NULL,
        'back_to_campaign_link' => NULL,
        'recommended' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function dosomething_campaign_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['pitch'] = array(
    'label' => t('Pitch page'),
    'custom settings' => TRUE,
  );
}
/*
 * Implements hook_entity_view_mode_alter().
 * Used to change the view_mode of the campaign nodes.
 */
function dosomething_campaign_entity_view_mode_alter(&$view_mode, $context) {
  // Is this a campaign node?
  if ($context['entity_type'] == 'node' && $context['entity']->type == 'campaign' && $view_mode == 'full') {
    // If anonymous user:
    if (!user_is_logged_in()) {
      // Display pitch view mode.
      $view_mode = 'pitch';
      return;
    }
    $node = $context['entity'];
    // If the current user is not on staff, and not signed up for the campaign, show the pitch page.
    if (!dosomething_user_is_staff()) {
      if (!dosomething_signup_exists($node->nid)) {
        $view_mode = 'pitch';
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function dosomething_campaign_preprocess_node(&$vars) {
  if ($vars['type'] != 'campaign') { return; }

  // Are we on a the action/pitch page?
  if ($vars['view_mode'] == 'pitch' || $vars['view_mode'] == 'full') {

    $node = menu_get_object();
    $wrapper = entity_metadata_wrapper('node', $node);

    $scholarship = $wrapper->field_scholarship_amount->value();
    if (isset($scholarship)) {
      $vars['scholarship'] = '$' . $scholarship . ' Scholarship';
    }

    $vars['cta'] = $wrapper->field_call_to_action->value();

    // Timing.
    $display_date = $wrapper->field_display_end_date->value();
    // Check if there is a value in the date field.
    $high_season = $wrapper->field_high_season->value();
    if ($display_date == 1 && isset($high_season)) {
      $end_date = date('F d', $wrapper->field_high_season->value2->value());
      $vars['end_date'] = 'Ends ' . $end_date;
    }

    // Images.
    if (isset($vars['field_image_campaign_cover'][0])) {
      $hero_nid = $vars['field_image_campaign_cover'][0]['entity']->nid;
      $vars['hero_image_l'] = dosomething_image_get_themed_image($hero_nid, 'landscape', '1920x1280');
      $vars['hero_image_m'] = dosomething_image_get_themed_image($hero_nid, 'portrait', '640x800');
      $vars['hero_image_l_url'] = dosomething_image_get_themed_image_url($hero_nid, 'landscape', '1920x1280');
      $vars['hero_image_m_url'] = dosomething_image_get_themed_image_url($hero_nid, 'landscape', '640x800');
    }

    if (isset($vars['field_partners'])) {
      // Returns partners, sponsors, and partner_info arrays.
      $partners_vars = dosomething_taxonomy_get_partners_vars($vars['nid']);
      // Gather any returned arrays.
      foreach ($partners_vars as $key => $values) {
        $vars[$key] = $values;
      }
    }

    if ($vars['view_mode'] == 'pitch') {
      // Use the pitch page template to theme.
      $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__pitch';
      // Gather vars for pitch page.
      dosomething_campaign_preprocess_pitch_page($vars, $wrapper);
    }
    elseif ($vars['view_mode'] == 'full'){
      // Gather the vars for the action page.
      dosomething_campaign_preprocess_action_page($vars, $wrapper);
    }
  }
}

/**
 * Preprocesses variables for a campaign action page.
 *
 * @param array $vars
 *   Node variables, passed from preprocess_node.
 * @param object $wrapper
 *   The corresponding entity wrapper for the node in $vars.
 */
function dosomething_campaign_preprocess_action_page(&$vars, &$wrapper) {
  // Know.
  $vars['solution_copy'] = $wrapper->field_solution_copy->value();
  $vars['solution_support'] = $wrapper->field_solution_support->value();
  $vars['issue'] = $wrapper->field_issue->value()->name;

  // Collect fact values as tpl variables.
  $fact_problem = $wrapper->field_fact_problem->value();
  if (isset($fact_problem)) {
    $vars['fact_problem'] = dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_problem);
  }
  $fact_solution = $wrapper->field_fact_solution->value();
  if (isset($fact_solution)) {
    $vars['fact_solution'] = dosomething_fact_get_fact_wrapper_values($wrapper->field_fact_solution);
  }

  $more_facts = $wrapper->field_facts->value();
  if (isset($more_facts)) {
    $vars['more_facts'] = dosomething_fact_get_fact_field_wrapper_values($wrapper->field_facts);
  }

  // Collect all field_collection values as vars.
  $field_collections = array('faq', 'step_pre', 'step_post');
  foreach ($field_collections as $fc) {
    $vars[$fc] = dosomething_campaign_get_field_collection_values($wrapper, 'field_' . $fc);
  }

  $psa = $wrapper->field_psa->value();
  if (isset($psa)) {
    $vars['psa'] = '<iframe id="ytplayer" type="text/html" width="640" height="390"
     src="http://youtube.com/embed/' . $psa . '"' . 'frameborder="0"/>';
  }
  else {
    if (isset($vars['field_image_psa_replacement'][0])) {
      $psa_nid = $vars['field_image_psa_replacement'][0]['entity']->nid;
      $vars['psa'] = dosomething_image_get_themed_image($psa_nid, 'landscape', '720x310');
    }
  }

  // Plan.
  $vars['starter'] = $wrapper->field_starter_statement->value();
  $vars['time'] = $wrapper->field_time_and_place->value();
  $vars['vips'] = $wrapper->field_vips->value();
  $vars['hype'] = $wrapper->field_promoting_tips->value();
  $vars['items_needed'] = $wrapper->field_items_needed->value();
  $vars['location_finder_copy'] = $wrapper->field_location_finder_copy->value();
  $vars['location_finder_url'] = $wrapper->field_location_finder_url->value();
  $action_guides = $wrapper->field_action_guide->value();
  if (isset($action_guides)) {
    foreach ($action_guides as $delta => $action_guide) {
      $action_guide_path = 'node/' . $action_guide->nid;
      $action_guide_wrapper = entity_metadata_wrapper('node', $action_guide->nid);
      $action_guide_desc = $action_guide_wrapper->field_description->value();
      $vars['action_guides'][] = l($action_guide_desc, $action_guide_path);
    }
  }

  // Do.
  $vars['pre_step_header'] = $wrapper->field_pre_step_header->value();
  $vars['pre_step_copy'] = $wrapper->field_pre_step_copy->value();
  $vars['pic_step'] = $wrapper->field_photo_step->value();
  $vars['post_step_header'] = $wrapper->field_post_step_header->value();
  $vars['post_step_copy'] = $wrapper->field_post_step_copy->value();

  // Prove.
  $vars['reportback_copy'] = $wrapper->field_reportback_copy->value();

  // Image galleries.
  foreach ($vars['field_image_step_gallery'] as $key => $step_image) {
    $nid = $step_image['entity']->nid;
    $vars['step_image'][$key] = dosomething_image_get_themed_image($nid, 'square', '310x310');
  }
  foreach ($vars['field_image_reportback_gallery'] as $key => $rb_image) {
    $rb_image['nid'] = $rb_image['entity']->nid;
    $vars['reportback_image'][$key] = dosomething_image_get_themed_image_url($rb_image['nid'], 'landscape', '720x310');
  }

  // Reportback form.
  // Intialize reportback entity to NULL.
  $reportback = NULL;
  $vars['reportback_link_label'] = t("Submit Your Pic");
  // If logged in user's reportback exists for this node,
  if ($rbid = dosomething_reportback_exists($vars['nid'])) {
    // Load existing reportback entity to pass through to reportback form.
    $reportback = entity_load_single('reportback', $rbid);
    $vars['reportback_link_label'] = t("Update Submission");
  }
  $vars['reportback_form'] = drupal_get_form('dosomething_reportback_form', $wrapper, $reportback);

  // Zendesk Support Ticket form.
  if (module_exists('dosomething_zendesk')) {
    $vars['zendesk_form'] = drupal_get_form('dosomething_zendesk_form');
  }
}

/**
 * Preprocesses variables for a campaign pitch page.
 *
 * @param array $vars
 *   Node variables, passed from preprocess_node.
 * @param object $wrapper
 *   The corresponding entity wrapper for the node in $vars.
 */
function dosomething_campaign_preprocess_pitch_page(&$vars, &$wrapper) {
  // Define label for signup button.
  $label = t("Sign Up");
  // If user is logged in:
  if (user_is_logged_in()) {
    // Render button as sign up form.
    $vars['signup_button'] = drupal_get_form('dosomething_signup_form', $vars['nid'], $label);
  }
  // Otherwise, for anonymous user:
  else {
    // Render button as link to open up the login modal.
    $vars['signup_button'] = array(
      '#markup' => '<a href="#modal--login" class="js-modal-link btn medium">' . $label . '</a>',
    );
  }
}

/**
 * Returns array of values of a field collection field.
 *
 * @param object $wrapper
 *   An entity_metadata_wrapper object.
 * @param string $field_name
 *   The field_collection field to return values from.
 *
 * @return mixed
 *   Multi-dimensional array of field collection values or NULL if empty.
 *
 */
function dosomething_campaign_get_field_collection_values($wrapper, $field_name) {
  $values = array();
  // Loop through the given field.
  foreach ($wrapper->{$field_name}->getIterator() as $delta => $field) {
    // Copy is returned as an array.
    $copy = $field->field_compound_text_copy->value();
    $values[] = array(
      'header' => $field->field_compound_text_header->value(),
      'copy' => $copy['safe_value'],
    );
  }
  if (!empty($values)) {
    return $values;
  }
  return NULL;
}

/**
 * Returns array of nid's of recommended campaigns for $uid.
 *
 * First finds published staff pick campaigns that user has not signed up for.
 *
 * If there are less than 3, it finds published campaigns that have the
 * same primary cause as given $tid which the user has not signed up for.
 *
 *
 * @param int $tid
 *   The term $tid to query field_primary_cause for.
 *   This is used if there are less than 3 recommended staff picks for $uid.
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 *
 * @return array
 *  An array of node nid's.
 */
function dosomething_campaign_get_recommended_campaign_nids($tid, $uid = NULL) {
  if ($uid == NULL) {
    global $user;
    $uid = $user->uid;
  }
  // Get recommended staff picks first.
  $nids = dosomething_campaign_get_recommended_staff_pick_nids($uid);
  // If less than 3 staff picks:
  if (count($nids) < 3) {
    // Add recommended campaigns by term $tid.
    $tid_nids = dosomething_campaign_get_recommended_nids_by_term($tid, $uid);
    $nids = array_merge($nids, $tid_nids);
  }
  // Return top 3 nids:
  return array_slice($nids, 0, 3);
}

/**
 * Returns an EntityFieldQuery of recommended published campaigns for $uid.
 *
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 *
 * @return object
 *  An EntityFieldQuery of published campaigns that $uid has not signed up for.
 */
function _dosomething_campaign_get_recommended_base_query($uid) {
  // Store the nid's that the user has already signed up for.
  $signup_nids = dosomething_signup_get_signup_nids_by_uid($uid);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'campaign')
    ->propertyCondition('nid', $signup_nids, 'NOT IN')
    ->propertyCondition('status', 1)
    ->range(0, 3);
  return $query;
}

/**
 * Helper function to execute a given node EntityFieldQuery and return $nid's.
 *
 * @param object $query
 *   An EntityFieldQuery of campaign nodes.
 *
 * @return array
 *  An array of the result node nid's.
 */
function _dosomething_campaign_get_recommended_query_nids($query) {
  $result = $query->execute();
  if (isset($result['node'])) {
    return array_keys($result['node']);
  }
  // Return empty array if no result.
  return array();
}

/**
 * Returns array of nid's of recommended staff picks for $uid.
 *
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 *
 * @return object
 *  An EntityFieldQuery of staff pick nids that $uid has not signed up for.
 */
function dosomething_campaign_get_recommended_staff_pick_nids($uid) {
  $query = _dosomething_campaign_get_recommended_base_query($uid);
  // Add field condition to only return staff picks.
  $query->fieldCondition('field_staff_pick', 'value', 1);
  return _dosomething_campaign_get_recommended_query_nids($query);
}

/**
 * Returns array of nid's of recommended campaigns for $uid with given $tid.
 *
 * @param int $tid
 *   The term $tid to query field_primary_cause for.
 * @param int $uid
 *   The user $uid to recommend campaigns for.
 *
 * @return object
 *  An EntityFieldQuery of staff pick nids that $uid has not signed up for.
 */
function dosomething_campaign_get_recommended_nids_by_term($tid, $uid) {
  $query = _dosomething_campaign_get_recommended_base_query($uid);
  // Add field condition to only campaigns with primary cause $tid.
  $query->fieldCondition('field_primary_cause', 'tid', $tid);
  return _dosomething_campaign_get_recommended_query_nids($query);
}
